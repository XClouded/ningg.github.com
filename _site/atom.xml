<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title>NingG.github.com</title>
   <link href="http://ningg.github.com/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://ningg.github.com" rel="alternate" type="text/html" />
   <updated>2014-09-30T21:25:47+08:00</updated>
   <id>http://ningg.github.com</id>
   <author>
     <name></name>
     <email></email>
   </author>

   
   <entry>
     <title>想和自己谈一谈</title>
     <link href="http://ningg.github.com/personal-think"/>
     <updated>2014-09-30T00:00:00+08:00</updated>
     <id>http://ningg.github.com/personal-think</id>
     <content type="html">&lt;p&gt;今天读了&lt;code&gt;***&lt;/code&gt;的博客，特别是每年的个人总结，基本上2004–2013的都看了，希望能从中窥探一点前辈工作十余年的体会，同时也想看看有没有能够借鉴的，万幸，读的较为认真，我也产生了一点想法，借这个时机，我想和自己谈一谈。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;有个打算，有点追求&lt;/h2&gt;

&lt;p&gt;整体上，我需要有些时间较长的总结、计划，比如一年、6个月、3个月的打算；每次打算，需要要涵盖3个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前一段，我做了什么？有什么可以积累的地方、有什么改进的地方；&lt;/li&gt;
  &lt;li&gt;接下来我需要做什么？计划怎么行动？&lt;/li&gt;
  &lt;li&gt;做这些事情，有一个基本的理念，有吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说到较长时间的打算，我在学校读书的最后一年，曾有过3个月的打算，其实打算开始之前，已经陆续铺垫有3个多月，事后总结，最初的打算完成了60%，当时获得了很大的信心，那种幸福、自信的感觉为自己今后的一些决定带来了内心的支撑，特别是，当出现争议的时候，自己能够在自己进行深入分析后做决断。&lt;/p&gt;

&lt;p&gt;自己做事情，脑袋里有一个基本的理念吗？理念还是有的，整体上几个点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;知识、认识方面的&lt;strong&gt;分享&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;多人一起做事时的&lt;strong&gt;协作&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;所用基础工具的&lt;strong&gt;开源&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;团队、个人核心在于&lt;strong&gt;成长&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从上述理念出发，更能得到自己的共鸣，不要怕对外开放、交流之后，技术上被超越，即使被超越了，对整个社会的进步也是好的。&lt;em&gt;（如果公司对于某些技术有保密要求，这就绝不能对外分享，但是整体的框架，一些设计理念上的东西，也可以在交流中成长）&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;能够随身携带的技能，如果可以预见的时间内会用到，那就尽多获取、提早准备，例如，驾驶、外语、急救措施、生活中安全措施。当然，其中最重要是：身体。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;视野放开，保持敏感&lt;/h2&gt;

&lt;p&gt;要将视野放开，保持与时代相接触，对于自己所处行业，需要有自己的认识，这个认识可以是错误的，分享出去，自然会有人忍不住来指正，关注国内和国外最新的科技动态，包括产品、生活、行业；主要途径：业内顶尖人才、顶尖公司动向，领域内主流媒体的动向。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;前沿媒体：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;www.36kr.com&quot;&gt;36Kr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;www.infoq.com&quot;&gt;InfoQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;www.valleytalk.org&quot;&gt;弯曲评论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;个人博客、微信：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;coolshell.cn&quot;&gt;酷壳coolshell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;www.williamlong.info&quot;&gt;月光博客&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;陈利人：&lt;a href=&quot;http://weibo.com/lirenchen&quot;&gt;微博&lt;/a&gt;、&lt;code&gt;微信号：daiziguizhongren&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;梁斌：&lt;a href=&quot;http://weibo.com/pennyliang&quot;&gt;微博&lt;/a&gt;、&lt;code&gt;微信号：pennyjob&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Fenng：&lt;a href=&quot;http://hutu.me/&quot;&gt;小道消息&lt;/a&gt;、&lt;a href=&quot;http://news.dbanotes.net/&quot;&gt;Startup News&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;新兴的潮流网站：对一些如同爆炸性出现的新技术、网站、观点，保持敏感度，进行简要学习其基本规律，了解轮廓。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;上面说了两点，其实就是一个意思：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有个打算，有点追求：做事情，集中精力，一件一件解决掉；&lt;/li&gt;
  &lt;li&gt;视野放开，保持敏感：做事情，看趋势，3~5年、20年；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;闲谈&lt;/h2&gt;

&lt;p&gt;我写blog，大都是分要点，列一个1、2、3，调理还算清晰，但，我总感觉我blog读起来味道怪怪的，相反，读Fenng、caoz、haoel的文章，能感觉到有平铺直叙、娓娓道来，很有味道。写blog，不仅要内容有用，而且，让人读起来也要舒服，这一点，我需要学习改进。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>线框图工具：mockups</title>
     <link href="http://ningg.github.com/mockups-intro"/>
     <updated>2014-09-29T00:00:00+08:00</updated>
     <id>http://ningg.github.com/mockups-intro</id>
     <content type="html">&lt;h2 id=&quot;mockups&quot;&gt;mockups的特点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;快：提供常用的元素，通过简单托、拉、拽等动作，即可完成线框图绘制；&lt;/li&gt;
  &lt;li&gt;手绘风格：展示效果，朴素、简洁，能够突出内容、层次结构、业务流程；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;基础用法&lt;/h2&gt;

&lt;p&gt;简单的托、拉、拽内置的组件，就能够达到如下的效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mockups-intro/simple-operate.jpg&quot; alt=&quot;简单的鼠标操作&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;高效用法&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;操作&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;/&lt;/code&gt;/&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;快速定位到&lt;code&gt;Quick Add&lt;/code&gt;输入框，在其中输入控件名字，即可自动添加一个元素&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Enter&lt;/code&gt;/&lt;code&gt;F2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;编辑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Ctrl+2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;锁定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Ctrl+Up&lt;/code&gt;/&lt;code&gt;Ctrl+Down&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;上移、下移一层&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;Ctrl+D&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;复制并粘贴，相当于&lt;code&gt;Ctrl+C&lt;/code&gt; + &lt;code&gt;Ctrl+V&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;几点补充：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;官方提供一些现有的UI模版：&lt;a href=&quot;http://support.balsamiq.com/customer/portal/articles/1311316-how-to-download-from-mockups-to-go&quot;&gt;Mockups To Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;通过点击，可实现mockups一个页面跳转到同一目录下的另一个页面；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（官方网站内容还没有看完，doing…）&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://support.balsamiq.com/#support-documentation&quot;&gt;Mockups官网文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://support.balsamiq.com/customer/portal/topics/49503-tutorials&quot;&gt;Mockups官网Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;闲谈&lt;/h2&gt;

&lt;p&gt;扯一点小事：写这篇文章关于mockups操作的文章，起初是无意间受到&lt;code&gt;1-2-3&lt;/code&gt;的博客《&lt;a href=&quot;http://www.cnblogs.com/1-2-3/archive/2009/08/17/Balsamiq-Mockups-Introduction.html&quot;&gt;我喜欢Balsamiq Mockups的三大理由&lt;/a&gt;》和《&lt;a href=&quot;http://www.cnblogs.com/1-2-3/archive/2009/06/30/Balsamiq-Mockups-tips.html&quot;&gt;Balsamiq Mockups 小技巧&lt;/a&gt;》 启发，不过自己当时冷静了一下，脑海里闪烁一个疑问：&lt;code&gt;1-2-3&lt;/code&gt;关于mockups的知识是从哪获取的？哦，官网，最初的知识传播，肯定是某人比较认真，读了官网，然后知识就散播开了，OK，为避免知识在传播过程中有损伤、误解，我直接找根源好了，这样的做法在普通人看来笨拙，却是真正捷径，最简洁、省时、省力的方法。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>产品设计：线框图</title>
     <link href="http://ningg.github.com/wireframe"/>
     <updated>2014-09-28T00:00:00+08:00</updated>
     <id>http://ningg.github.com/wireframe</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;题记：从网上找了一份材料：&lt;a href=&quot;/download/wireframe/wireframe-learning.pptx&quot;&gt;Wireframes.ppt&lt;/a&gt;，下面的内容基本都是从其中整理出来的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;项目流程&lt;/h2&gt;

&lt;p&gt;直接贴一张图片：项目流程（中大型产品），这张图片来自于&lt;a href=&quot;/download/wireframe/wireframe-learning.pptx&quot;&gt;Wireframes.ppt&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wireframe/project-process.png&quot; alt=&quot;project-process.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明一点：线框图产生于项目前期，对应到上面的流程中，就是&lt;code&gt;交互设计初稿&lt;/code&gt;的阶段。&lt;/p&gt;

&lt;p&gt;总结一下上面图片中展示的项目流程，一个中大型产品的开发基本过程是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;需求分析&lt;/li&gt;
  &lt;li&gt;需求确定&lt;/li&gt;
  &lt;li&gt;交互设计稿&lt;em&gt;（线框图）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;视觉设计稿&lt;em&gt;（线框图）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;项目计划，包括：
    &lt;ul&gt;
      &lt;li&gt;功能需求分析&lt;/li&gt;
      &lt;li&gt;开发设计&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;产品开发，包括：
    &lt;ul&gt;
      &lt;li&gt;前端程序开发&lt;/li&gt;
      &lt;li&gt;后端程序开发&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;测试&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;线框图&lt;/h2&gt;

&lt;p&gt;线框图，就是几张骨架图，两点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;线框、简单的线条，来表现内容；&lt;/li&gt;
  &lt;li&gt;不关心视觉效果和细节；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要做一个用户展示界面的，有几个方面需要考虑：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;需要展示什么内容？&lt;/li&gt;
  &lt;li&gt;这些内容的重要程度怎么划分？&lt;/li&gt;
  &lt;li&gt;内容之间的层次关系？&lt;/li&gt;
  &lt;li&gt;同一页面上，不同内容的位置？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面前两点，需要通过需求分析来确定；后两点，在线框图上能够体现出来。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;线框图的意义&lt;/h3&gt;

&lt;p&gt;线框图在产品的设计过程中，具有不可替代的优势：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;快速创建：设计师不需要考虑太多细节；&lt;/li&gt;
  &lt;li&gt;直观呈现，帮助聚焦：项目前期，去除视觉和细节干扰，确保讨论中，大家将注意力集中在：需求是什么？需要放啥东西？需要怎么样与用户交互？这些内容的层次如何划分？&lt;/li&gt;
  &lt;li&gt;方便修改：轻松修改设计、甚至放弃某一设计；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;几点理论&lt;/h3&gt;

&lt;p&gt;关于线框图，有几点要说明的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个阶段的线框图都有其特定的价值，并不是精美细致的就是好的；&lt;/li&gt;
  &lt;li&gt;从最简单的设计开始，逐渐添加细节；&lt;/li&gt;
  &lt;li&gt;线框图的最大价值在于讨论和优化；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通常用户进行产品设计时，绘制产品原型的过程，分为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;草图&lt;/li&gt;
  &lt;li&gt;粗略线框图&lt;/li&gt;
  &lt;li&gt;详细线框图&lt;/li&gt;
  &lt;li&gt;交互说明图&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;线框图分类&lt;/h3&gt;

&lt;p&gt;当前不同人员都会使用线框图，主要的有3类设计师：PD、交互、视觉。他们使用线框图的侧重有所不同：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PD：关注，功能、内容、业务流程；&lt;/li&gt;
  &lt;li&gt;交互：关注，业务流程、页面布局、层次结构；&lt;/li&gt;
  &lt;li&gt;视觉：关注，整体风格/气质、颜色、质感，以及其他精细的视觉元素；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结一下，对于中小工程，应该一个工程师搞定所有、一切。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;画线框图的工具&lt;/h2&gt;

&lt;p&gt;选取工具有几个依据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保证线框图本身的优势不缺失：快速创建、帮助聚焦、方便修改；&lt;/li&gt;
  &lt;li&gt;工具制作的输出文档要易用：例如，保存为多种形式；&lt;/li&gt;
  &lt;li&gt;想法不受工具的束缚；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更详细一点，产品设计时，选取工具要考虑如下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Design更容易：线框图、流程图、架构图&lt;/li&gt;
  &lt;li&gt;Present更方便：策划文档、规格书&lt;/li&gt;
  &lt;li&gt;Experience更交互：体验原型、交互设计&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说两个工具：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mockups&lt;/li&gt;
  &lt;li&gt;Axure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;工具能够提升做事的效率，但归根结底，进行设计的时候，是需要想法、需要思考的，工具只是表达；具体在使用线框图时，说两点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从最简单的开始，在迭代中逐步增加细节；&lt;/li&gt;
  &lt;li&gt;留下会议纪要、修改纪要；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;嗳，刚刚回头看了一下上面对线框图的说明，我x，是我故意把事情说复杂了吧，线框图存在的意义，其实，就几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把想法写出来；&lt;em&gt;（借助工具）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;从其他人那里得到反馈意见；&lt;/li&gt;
  &lt;li&gt;修改至定稿；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-7&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/download/wireframe/wireframe-learning.pptx&quot;&gt;Wireframes.ppt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>CTO这点事</title>
     <link href="http://ningg.github.com/talk-about-cto"/>
     <updated>2014-09-28T00:00:00+08:00</updated>
     <id>http://ningg.github.com/talk-about-cto</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;题记：本文转载自caoz，原文地址：&lt;a href=&quot;http://zhuanlan.zhihu.com/iamcaoz/19856992&quot;&gt;CTO这点事&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;几乎整个互联网行业都缺CTO，特别是一些草根背景的创业者，这个问题更加显著。从我自己的感受，身边各种朋友委托我找CTO的需求，嗯，算下来超过两位数了，光最近一个月就有3个，而且这三家都是刚拿了A轮的。其他那些公司CTO大部分空缺了一两年，或者其他高管临时暂代过渡。实话说，我觉得每个公司都不错的，但通常也只能遗憾的说，真没有能推荐的。
其实，根据个人的观察，每个互联网团队都喊需要CTO，但是具体诉求却各不相同，如果说共性，就只有一点，那就是，公司老板对技术的期望值与目前技术团队的能力表现，有较大的差异，而这个差异，对于老板来说，就是一个想法，找个合格的CTO，一切就都解决了。其实，真不是这回事。&lt;/p&gt;

&lt;p&gt;今天要说的第一点，就是期望值的控制；很多互联网公司都希望自己走技术驱动的路线，期望小而美，复制美国技术新贵的市场表现；这不能说是一个错误的期望，但是，现实能有多少符合这种需求的人才呢？这样的人才需要技术有前瞻性，对产业格局有判断，对管理有心得，情商还不能低（算了一下，四项里我至少三项不符合。）。整个行业内这样的人有几个？凭什么会跟你？　事实上我身边确实有这样的案例，一个以业务为主的公司，搞定了一个超棒的CTO，很快就转型成以技术为驱动的公司，公司价值极大提升，问题是，这种现象很难具有复制性。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/talk-about-cto/chinese-carrier.jpg&quot; alt=&quot;chinese-carrier&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cto&quot;&gt;大家对CTO的期望&lt;/h2&gt;

&lt;p&gt;下面我说一下一个最基本的让人纠结的问题，到底什么是CTO？其实，空谈这个名词的定义毫无意义，从我身边很多朋友公司的实例来看，他们对这个角色的定义和定位是差异非常大的。具体而言，不同创业团队，对CTO需求的真实想法，包括如下层面。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;技术选型&lt;/h3&gt;

&lt;p&gt;这其实是创业公司最纠结的问题；他们往往一上来基于已有的程序员的个人习惯和爱好，选择了一个技术方案，然后到某一天一看，我靠，全是坑（当然，也可能与执行者的能力有关）。而更糟的是，这个技术方案相对冷门，市场上去招聘都很难做。还有就是技术方案成本过高，（不只是钱的问题，特别是时间成本！）结果严重影响到后续的发展速度。　我举个简单例子，最近我给多个创业者提建议，比如做app，很多以内容运营为核心的app，不要用原生态开发，目前一堆第三方的跨平台开发架构，如果选择合适，可以极大减少开发成本，以及降低技术招聘的难度。微信开店开社区，也有一堆第三方平台，这些事情，对于一些创业者来说，就是特纠结的事情，第一，他们并不完全了解这个领域；第二，他们就算有所了解，也很难判断究竟谁家的方案更靠谱？难道要靠百度竞价排名来裁决么？　而对于技术人员，包括相当多技术高手，他们也会有一些自己的打算，比如说，我就熟悉这个，为啥要用我不熟悉的？（没有考虑从公司长远的人力成本和开发效率）。比如说，我本来服务端技术很强，现在用了一个开源服务端框架，比如skynet，我变成写脚本的了，我价值怎么体现？（不知道自己的价值来自于产品的市场表现）。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;万能适配器&lt;/h3&gt;

&lt;p&gt;公司有了一个基本的起步，比如在某个平台上有了一点成绩，然后希望扩展到不同领域，不同平台，然后老板突然发现，哦，原来程序员不是什么都会的。服务端，前端，运维，安全，数据库，甚至SEO优化（你敢说这不是技术？）最好有个牛人都能带起来，这个牛人，就是他们定义的CTO，咳咳。创业公司，人少而事杂，其实，真的可以理解。我认识不少创业者，最终万般无奈下，硬是把自己逼成了万能哥。话说当年我也是创业的时候，万般无奈才自学怎么做运维的，虽然很多都没学会，但是偶尔也能出去忽悠一下。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;性能调优及架构扩展&lt;/h3&gt;

&lt;p&gt;很多小公司到了一定的用户规模和并发规模的时候，一下子就扛不住了，甚至严重影响业务的拓展，某著名淘品牌自己做了一个独立网店，结果一搞秒杀活动就崩溃，（吐个槽，他们运营人员也死心眼，就知道搞秒杀，知道技术架构不行，不会搞点别的形式么）。结果独立网店一直就没搞起来。其实很多这些偏传统的互联网公司，他们所遇到的问题，在高手眼里不值一提，但是这个坎过不去，他们真就发展不起来。说个题外话八卦一下，当年腾讯叫oicq的时候，一堆*icq，只有腾讯牛了，其他的为啥不行？真的是产品原因么？其实都是这个问题，到了１００万用户的时候，就只有腾讯还能发展新用户，其他的技术全都撑不住了。大家看到的都是剩者为王，我看到的是，数不清非常不错的产品，死在这个环节上了。严格的说，这其实不是CTO的工作，按照分工来说，通常涉及系统分析师，系统架构师，以及DBA来做这方面的工作，但是对于创业公司，根本就没这种角色设定，他们遇到这个问题，通常想到的是，有个好的CTO就好了。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;团队管理和效率提升&lt;/h3&gt;

&lt;p&gt;这还真是CTO的本职工作了，我遇到技术出身的创业者，他纠结的问题是，当时自己一个人做开发，连带着做运营，七七八八一堆事，也把东西做起来了，现在公司产品知名度有了，拿到投资了，开发团队也搭起来了，怎么开发效率反而下去了？所以，他的理解是，需要一个CTO。　从技术人才招聘，团队培养，技术培训，到开发模式培训（比如现在流行的敏捷开发），产品质量测评体系，信息安全防护等等，这些林林总总的事情，对于创业者来说，就全部归纳为“需要一个CTO”，嗯。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;数据决策体系&lt;/h3&gt;

&lt;p&gt;自从“大数据”概念火了以后，基本上所有创业者都在谈，我的业务模式，发展了海量用户后，一定是基于数据驱动，可是数据咋驱动？没几个人真想清楚了，但是没关系，只要有CTO，这个问题就解决了。　我知道真有能搞定此事的CTO，真的有，不过，真的属于稀缺品种，目测比大熊猫还少。因为，要理解数据驱动，首先要理解业务，而理解业务，往往不是技术人员的特长。又要自吹一句，我在百度的时候，最牛逼的事情就是在产品部门里搭出一个技术团队，来做数据，为什么要坚持在产品部门编制？（实话说，当年技术部门的薪酬更高一些），我坚持认为重心在于数据目标和解读，而不是技术实现。　所以，这里我多说一句，数据决策体系，先想清楚具体目标和具体展现，再寻求技术支持，而不是一句话推给技术团队去弄，除非你公司里真有这么一只极品稀缺大熊猫。　实际上，再吐个槽，最基本的数据处理的结果，经过正确严谨的解读，就已经有极大的价值了，而很多人往往无视这些，去追求更高深的技术实现，搞一些莫名其妙的算法和逻辑，来彰显技术价值，其实是舍近求远的表现。　&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;重构商业模式&lt;/h3&gt;

&lt;p&gt;这个，咳咳，怎么说呢，公司觉得自己商业模式不够酷，不够吸引资本关注，希望从业务驱动转为技术驱动，嗯，来个牛逼的CTO，这事真可行，嗯，话说，这事真可行，点到为止，不展开了。　&lt;/p&gt;

&lt;p&gt;以上是我观测到的，身边以及业内一些典型的CTO需求，当然，不同公司诉求真的不一样。有的侧重管理，有的侧重解决瓶颈问题，但是对老板而言，只要他们认为目前技术团队不够好，不够给力，不够预期，那么，这就是他们认为缺乏的，CTO。不仅仅是创业公司，上市公司乃至巨头，这个问题也一样存在，比如说，百度的CTO，貌似空缺了好几年呢。是他们的人才不够优秀么？还不是达不到李厂长期望值。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;个人观点&lt;/h2&gt;

&lt;p&gt;下面说我的一些观点&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一&lt;/strong&gt;，相当比例大公司背景的技术牛人，并不适合去创业公司做CTO，原因1：技术再牛，不够全面，这没辙，大公司求深，创业公司求全；原因2：技术再牛，要懂业务。创业公司没有完备严谨的产品经理，没有明确的目标规划，很多工作是一个初步的目标，然后做起来看。如果技术人员不懂业务，很可能就会走弯路，做出很多不伦不类的东西，所以创业公司遇到这样的大牛，要先沟通到位再决定，不要迷信简历，当然，不乏这里有非常出色的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二&lt;/strong&gt;，创始公司老板要想清楚自己当前真正需要的是什么，控制一下目标和欲望，有些事不能强求的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三&lt;/strong&gt;，要给人才成长的空间，CTO也不是天生的，不要认为外面的和尚一定好念经。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第四&lt;/strong&gt;，遇到真的特别合适的人才，要舍得本钱，理想可以谈，但是让人家舍弃各种丰厚回报的机会来跟你打拼，总要出示一些诚意。要知道这样的人才是稀缺品。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;几点解释&lt;/h2&gt;

&lt;p&gt;最后解释一下 CTO所需要的四个领域的能力&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;技术前瞻性&lt;/strong&gt;，就好比2010年谷歌手机发布了，您还在那里吭哧吭哧跟老板说咱们好好弄塞班。（好多技术牛人，大公司的技术总监都是这样的！！！）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对产业格局有判断&lt;/strong&gt;，举例来说，移动互联网起来了，能知道工具型，娱乐性，生活性的应用大概的爆发周期和爆发规模。 能对移动游戏，电商的发展速度和市场顶点在哪里，这样才能给老板正确的技术投入建议和规划目标建议，别市场喷发的时候不去考虑准备架构扩容，还在角落里扣扣索索的算怎么比同行省点运维成本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;管理心得&lt;/strong&gt;，技术团队的培养和带动，别光顾着自己牛逼，要让团队牛逼。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;情商&lt;/strong&gt;，各种沟通，协调，不解释。&lt;/p&gt;

&lt;p&gt;就这样，有点凌乱，凑活看吧&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>优秀的软件工程师</title>
     <link href="http://ningg.github.com/software-engineer-self-test"/>
     <updated>2014-09-28T00:00:00+08:00</updated>
     <id>http://ningg.github.com/software-engineer-self-test</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;题记：本文转载自邹欣的书籍《&lt;a href=&quot;http://book.douban.com/subject/25965995//&quot;&gt;构建之法&lt;/a&gt;》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;保持高标准，不要受制于破窗理论(broken windows theory)。
当你看到不靠谱的设计、糟糕的代码、过时的文档和测试用例的时候，不要想“既然别人的代码已经这样了，我的代码也可以随便一点啦。”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主动解决问题。当看到不靠谱的设计，糟糕的代码的时候，不要想“可能别人会来管这个事情” ，或者“我下个月发一个邮件让大家讨论一下”。要主动地把问题给解决了[ii]。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;经常给自己充电，身体训练是运动员生活的一部分，学习是软件工程师职业的伴侣。每半年就要了解和学习一些新的相关技术。通过定期分享（面对面的分享，写技术博客等）来确保自己真正掌握了新技术。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DRY （Don’t Repeat Yourself）——别重复。在一个系统中，每一个知识点都应该有一个无异议的、正规的表现形式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;消除不相关模块之间的影响，在设计模块的时候，要让它们目标明确并单一，能独立存在，没有不明确的外部依赖。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过快速原型来学习，快速原型的目的是学习，它的价值不在于代码，而在于你通过快速原型学到了什么。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设计要接近问题领域，在设计的时候，要接近你目标用户的语言和环境。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;估计任务所花费的时间，避免意外。在开始工作的时候，要做出时间和潜在影响的估计，并通告相关人士，避免最后关头意外发生。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;图形界面的工具有它的长处，但是不要忘了命令行工具也可以发挥很高的效率，特别是可以用脚本构建各种组合命令的时候。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有很多代码编辑器，请把其中一个用得非常熟练。让编辑器可以实现自己的定制，可以用脚本驱动，用起来得心应手。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;理解常用的设计模式，并知道择机而用。设计模式不错，更重要的是知道它的目的是什么，什么时候用，什么时候不用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码版本管理工具是你代码的保障，重要的代码一定要有代码版本管理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在debug的时候，不要惊慌，想想导致问题的原因可能在哪里。一步一步地找到原因。要在实践中运用工具，善于分析日志（log），从中找到bug。同时，在自己的代码里面加 log.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重要的接口要用形式化的“合同”来规定。用文档和断言、自动化测试等工具来保证代码的确按照合同来做事，不多也不少。使用断言 (assertion) 或者其他技术来验证代码中的假设，你认为不可能发生的事情在现实世界中往往会发生。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;只在异常的情况下才使用异常 (Exception),  不加判断地过多使用异常，会降低代码的效率和可维护性。记住不要用异常来传递正常的信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;善始善终。如果某个函数申请了空间或其他资源，这个函数负责释放这些资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当你的软件有多种技术结合在一起的时候，要采用松耦合的配置模式，而不是要把所有代码都集成到一起。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把常用模块的功能打造成独立的服务，通过良好的界面 (API) 来调用不同的服务。[YEKA1] &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在设计中考虑对并行的支持，这样你的API 设计会比较容易扩展。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在设计中把展现模块 (View) 和实体模块 (Model) 分开，这样你的设计会更有灵活性。 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重视算法的效率，在开始写之前就要估计好算法的效率是哪一个数量级上的（big-O）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在实际的运行场景中测试你的算法，不要停留在数学分析层面。有时候一个小小的实际因素 (是否支持大小写敏感的排序，数据是否支持多语言)会导致算法效率的巨大变化。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;经常重构代码，同时注意要解决问题的根源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在开始设计的时候就要考虑如何测试 ，如果代码出了问题，有log 来辅助debug 么? 尽早测试，经常测试，争取实现自动化测试，争取每一个构建的版本都能有某些自动测试。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码生成工具可以生成一堆一堆的代码，在正式使用它们之前，要确保你能理解它们，并且必要的时候能debug 这些代码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;和一个实际的用户一起使用软件，获得第一手反馈。 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在自动测试的时候，要有意引地入bug，来保证自动测试的确能捕获这些错误。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果测试没有做完，那么开发也没有做完。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;适当地追求代码覆盖率：每一行的代码都覆盖了，但是程序未必正确。要确保程序覆盖了不同的程序状态和各种组合条件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果团队成员碰到了一个有普遍意义的bug,  应该建立一个测试用例抓住以后将会出现的类似的bug。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试：多走一步，多考虑一层。如果程序运行了一星期不退出，如果用户的屏幕分辨率再提高一个档次，这个程序会出什么可能的错误?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;（带领团队）了解用户的期望值，稍稍超出用户的期望值，让用户有惊喜。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(带领团队) 不要停留在被动地收集需求，要挖掘需求。真正的需求可能被过时的假设、对用户的误解或其他因素所遮挡。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;（带领团队）把所有的术语和项目相关的名词、缩写等都放在一个地方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;（带领团队）不要依赖于某个人的手动操作，而是要把这些操作都做成有相关权限的人士都能运行的脚本。这样就不会出现因为某人休假而项目被卡住的情况。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;（带领团队）要让重用变得更容易。一个软件团队要创造一种环境，让软件的重用变得更容易。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;（带领团队）在每一次迭代之后，都要总结经验，让下一次迭代的日程安排更可靠。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;备注：&lt;/p&gt;

&lt;p&gt;其他上面的内容，其他地方也有转载和评论：&lt;a href=&quot;http://www.cnblogs.com/xinz/p/3852177.html&quot;&gt;邹欣的教学博客&lt;/a&gt;和&lt;a href=&quot;http://www.zhihu.com/question/19560521/answer/31141681&quot;&gt;知乎出版人周筠&lt;/a&gt;。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>产品设计：概要</title>
     <link href="http://ningg.github.com/product-design"/>
     <updated>2014-09-28T00:00:00+08:00</updated>
     <id>http://ningg.github.com/product-design</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;最近要做一个系统，包含了三部分：数据收集、分析处理、结果展示交互；其中，系统用户关心的只有&lt;code&gt;结果展示交互&lt;/code&gt;模块；这一模块的设计，直接决定了&lt;code&gt;分析处理&lt;/code&gt;模块中，数据结果的存储形式。现在的问题是，需要先设计好&lt;code&gt;结果展示交互&lt;/code&gt;模块，这样才能保证&lt;code&gt;分析处理&lt;/code&gt;模块开发完成。&lt;/p&gt;

&lt;p&gt;冷静想一想，上面问题的产生，根源是：没有按照正常的互联网产品开发流程，来推进项目。由于系统规模并不大，现在调整为互联网产品的开发流程也不迟。没有相关的人才？我是干什么的，需要什么，就能会什么，搞起。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;产品的诞生流程&lt;/h2&gt;

&lt;p&gt;直接点，当前我对这些产品原型什么的都没有概念，之前在某处的时候，见过产品开发的基本流程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;产品/设计狮，出一版PSD；&lt;/li&gt;
  &lt;li&gt;研发工程狮，开始开发；说点细节：
    &lt;ul&gt;
      &lt;li&gt;核心攻城狮，敲定表格字段；&lt;/li&gt;
      &lt;li&gt;核心攻城狮，搭起前后端分离的整体架构；&lt;/li&gt;
      &lt;li&gt;所有攻城狮，一起编码实现业务逻辑；&lt;/li&gt;
      &lt;li&gt;Review代码、结伴编程，保证代码质量；&lt;/li&gt;
      &lt;li&gt;夜黑风高时，系统上线（如果是测试环境，则，不用赶在晚上了）；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;整个运营团队、开发团队一边使用系统，一边提交改进意见（包含当前系统截图）；&lt;/li&gt;
  &lt;li&gt;系统细节调整、更新；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从上面的清单中，可以看出步骤2的工作量较大，其实不是这样的，只是自己以前参与了工程的研发，所以知道的研发方面比较细节的东西；实际上，每一步骤，都包含了差不多的工作量，有的脑力多一些，有的体力多一些。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;关注点&lt;/h2&gt;

&lt;p&gt;进行线上产品设计，关注点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;色彩搭配&lt;/li&gt;
  &lt;li&gt;字体选择&lt;/li&gt;
  &lt;li&gt;语言风格&lt;em&gt;（严肃？活泼？）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;视觉元素&lt;em&gt;（这是什么？）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;方法&lt;/h2&gt;

&lt;p&gt;当前进行产品设计时，常用的方法如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;手绘草图：设计变得自由；&lt;/li&gt;
  &lt;li&gt;线框图：？&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://udc.weibo.com/&quot;&gt;weibo UDC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mux.baidu.com/&quot;&gt;baidu MUX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ued.taobao.org/&quot;&gt;taobao UED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.woshipm.com/tag/ued&quot;&gt;woshipm UED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cued.xunlei.com/&quot;&gt;xunlei CUED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ued.orzk.com/&quot;&gt;orzk UED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ued.ctrip.com/blog/&quot;&gt;ctrip UED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://uedc.163.com/&quot;&gt;163 UEDC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ued.sina.com/&quot;&gt;sina UED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cdc.tencent.com/&quot;&gt;tencent CDC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mxd.tencent.com/&quot;&gt;tencent MXD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://isux.tencent.com/&quot;&gt;tencent ISUX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fex.baidu.com/&quot;&gt;baidu FEX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>Android入门几个基本知识</title>
     <link href="http://ningg.github.com/android-lesson-one"/>
     <updated>2014-09-23T00:00:00+08:00</updated>
     <id>http://ningg.github.com/android-lesson-one</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;最近参加某活动，也算掌握了点滴的内容，整理一下，算是阶段的笔记。&lt;/p&gt;

&lt;h2 id=&quot;android4&quot;&gt;Android的4个模块&lt;/h2&gt;

&lt;p&gt;Android开发中涉及4个模块/对象：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Activity；&lt;/li&gt;
  &lt;li&gt;Service；&lt;/li&gt;
  &lt;li&gt;Broadcast Receiver；&lt;/li&gt;
  &lt;li&gt;Content Provider；&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;activity&quot;&gt;Activity&lt;/h3&gt;

&lt;p&gt;通常是用户界面，粒度也可能更细些，例如：菜单列表、图片、图片标题，都可能是一个单独的Activity；&lt;/p&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;

&lt;p&gt;没有用户界面，但会一直在后台运行，例如：进行其他操作时，播放背景音乐、后台下载数据；&lt;/p&gt;

&lt;h3 id=&quot;broadcast-receiver&quot;&gt;Broadcast Receiver&lt;/h3&gt;

&lt;p&gt;应用程序利用Broadcast Receiver机制，来接收、发送广播消息，举例：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;接收/拨打电话；&lt;/li&gt;
  &lt;li&gt;接收/发送短信；&lt;/li&gt;
  &lt;li&gt;手机所处时区改变时，应用程序会接收到通知；&lt;/li&gt;
  &lt;li&gt;电池电量不足；&lt;/li&gt;
  &lt;li&gt;用户选择一张图片；&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;content-provider&quot;&gt;Content Provider&lt;/h3&gt;

&lt;p&gt;应用程序利用Content Provider机制，来进行数据共享，例如：读取系统电话簿中联系人；&lt;/p&gt;

&lt;h2 id=&quot;activity-1&quot;&gt;Activity的生命周期&lt;/h2&gt;

&lt;p&gt;生命周期？对，这个术语在计算机相关的开发中，总能听到，到底什么意思？干什么的？生命周期，&lt;code&gt;lifecycle&lt;/code&gt;，其基本目标是：描述清楚一个对象从产生到消亡的过程，为开发者干预这一过程提供方法。&lt;em&gt;（用个通俗的术语来重新表述一下Object lifecycle：物体的状态变化路径）&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;back-stack&quot;&gt;返回站（Back Stack）&lt;/h3&gt;

&lt;p&gt;说Activity的生命周期之前，补充一个概念：返回栈；为了方便管理Activity，将多个相互关联的Activity合并称作一个Task，一个Task对应一个Back Stack。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/android-lesson-one/diagram_backstack.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于返回栈，简要说明几点（官方文档）：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A &lt;code&gt;task&lt;/code&gt; is a collection of activities that users interact with when performing a certain job.&lt;/li&gt;
  &lt;li&gt;the back stack operates as a &lt;code&gt;last in, first out&lt;/code&gt; object structure.&lt;/li&gt;
  &lt;li&gt;pushed onto the stack when started by the current activity and popped off when the user leaves it using the Back button.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;activity-2&quot;&gt;Activity状态&lt;/h3&gt;

&lt;p&gt;Activity从产生到消亡，会有几个典型的状态，简要说一下（来自官方文档）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;运行状态：栈顶，显示Activity；&lt;/li&gt;
  &lt;li&gt;暂停状态：不处于栈顶，但部分可见；&lt;/li&gt;
  &lt;li&gt;停止状态：不处于栈顶，也全部不可见；&lt;/li&gt;
  &lt;li&gt;销毁状态：返回栈中，已经移除；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;acitivity-lifecycle&quot;&gt;Acitivity lifecycle&lt;/h3&gt;

&lt;p&gt;Activity生命周期如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/android-lesson-one/activity_lifecycle.png&quot; alt=&quot;activity_lifecycle.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;备注：可利用上面7个回调方法，来调整Activity。&lt;/p&gt;

&lt;h2 id=&quot;intent&quot;&gt;Intent简介&lt;/h2&gt;

&lt;p&gt;Intent是不同组件之间进行交互的重要方式，基本点两个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;指明当前组件要执行的动作；&lt;/li&gt;
  &lt;li&gt;不同组件之间传递的数据；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intent能够携带数据，具体用途有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;启动Activity；&lt;/li&gt;
  &lt;li&gt;启动Service；&lt;/li&gt;
  &lt;li&gt;发送广播；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intent分为2类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显式Intent：举例，Intent直接指定下一步启动的Activity；&lt;/li&gt;
  &lt;li&gt;隐式Intent；举例，通过Activity的&lt;code&gt;&amp;lt;activity&amp;gt;&amp;lt;intent-filter&amp;gt;&lt;/code&gt;来隐式指定，某个Activity来捕获哪一类的Intent；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android&quot;&gt;Android测试相关&lt;/h2&gt;

&lt;p&gt;之前，我对测试不感兴趣的，但最近感觉，开发中前期，对系统弄一个测试框架，能够提升开发、调试的效率，同时，也能在产品最终上线前进行较为全面的验证。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;测试点&lt;/h3&gt;

&lt;p&gt;测试，到底要测哪些方面？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;功能测试
    &lt;ul&gt;
      &lt;li&gt;安装/卸载&lt;/li&gt;
      &lt;li&gt;具体功能点&lt;/li&gt;
      &lt;li&gt;联网（默认的联网方式：wifi or sim卡？网络切换是否有相应提示？飞行模式）&lt;/li&gt;
      &lt;li&gt;程序进入输入功能时，是否正常弹出键盘？键盘是否遮挡应用需要输入内容的对话框？&lt;/li&gt;
      &lt;li&gt;home键与应用之间，多次切换&lt;/li&gt;
      &lt;li&gt;返回上一级操作，退出程序后的提示&lt;/li&gt;
      &lt;li&gt;当离开应用一段事件后，再次回到应用程序时，不能丢失用户数据；&lt;/li&gt;
      &lt;li&gt;横屏、竖屏切换时，不能丢失用户数据；&lt;/li&gt;
      &lt;li&gt;长按某一按钮，是否会触发其他事件；&lt;/li&gt;
      &lt;li&gt;PC端与APP端的数据同步（例如，bloger在PC端设置禁止他人评论，则，APP上也应禁止评论）&lt;/li&gt;
      &lt;li&gt;APP中内嵌的链接，程序如何处理？如果调用设备的浏览器，能否正常切回到APP？&lt;/li&gt;
      &lt;li&gt;各个页面间，多次切换&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;性能测试
    &lt;ul&gt;
      &lt;li&gt;APP的整体响应速度；&lt;/li&gt;
      &lt;li&gt;连续点击相同按钮（游戏类APP）&lt;/li&gt;
      &lt;li&gt;快速划屏（游戏类APP）&lt;/li&gt;
      &lt;li&gt;长时间使用应用&lt;/li&gt;
      &lt;li&gt;当应用不处于活动状态时，不能大量消耗系统资源&lt;/li&gt;
      &lt;li&gt;耗电情况&lt;/li&gt;
      &lt;li&gt;运行过程中，需要产看内存和CPU的使用情况：&lt;code&gt;adb shell top&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;异常测试
    &lt;ul&gt;
      &lt;li&gt;低电量情况下使用应用&lt;/li&gt;
      &lt;li&gt;（处理以下情况时，应用不能崩溃，并且返回应用后，数据不能丢失）&lt;/li&gt;
      &lt;li&gt;使用应用时，对来电的处理&lt;/li&gt;
      &lt;li&gt;使用应用时，对短信的处理&lt;/li&gt;
      &lt;li&gt;使用应用时，闹铃响起&lt;/li&gt;
      &lt;li&gt;使用应用时，锁屏、解锁&lt;/li&gt;
      &lt;li&gt;网络异常：使用应用时，断网；断网情况下，启动应用 &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UI测试&lt;/li&gt;
  &lt;li&gt;不同系统语言的支持&lt;/li&gt;
  &lt;li&gt;适配测试
    &lt;ul&gt;
      &lt;li&gt;目标：测试不同厂家、型号的手机上，APP的运行效果；&lt;/li&gt;
      &lt;li&gt;背景：由于手机型号、总类繁多，通常只关注当前用户数较多的手机&lt;/li&gt;
      &lt;li&gt;问题1：如何找出用户较多的具体手机型号？&lt;/li&gt;
      &lt;li&gt;RE问题1：选几个纬度，屏幕尺寸、分辨率、Android系统版本，正交定位一下&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;android-testing-framework&quot;&gt;Android Testing Framework&lt;/h3&gt;

&lt;p&gt;下面会列出一张图（官网拿的），简要说几点：&lt;em&gt;（可能理解有错，会陆续更正）&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Mock Objects&lt;/code&gt;：模拟系统的一切行为；另，支持依赖注入；&lt;/li&gt;
  &lt;li&gt;JUnit：写单元测试；（白盒测试）&lt;/li&gt;
  &lt;li&gt;Instrumentation：可以模拟系统行为，捕获Activity的任何一个回调方法；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/android-lesson-one/test_framework.png&quot; alt=&quot;test_framework.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基于这一测试框架，能够进行如下几个测试：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单元测试；&lt;/li&gt;
  &lt;li&gt;框架测试；（什么意思？）&lt;/li&gt;
  &lt;li&gt;UI测试；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;备注：在官网文档中，&lt;code&gt;Develop&lt;/code&gt;–&lt;code&gt;Tools&lt;/code&gt;部分，针对&lt;code&gt;Tests&lt;/code&gt;有详细介绍。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;测试工具&lt;/h3&gt;

&lt;p&gt;列几个常用测试工具，以及简要的说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;monkey：产生伪随机事件流，用途：压力测试、随机点击；&lt;/li&gt;
  &lt;li&gt;monkey runner：利用python脚本，进行自动化测试，可以测试安装/卸载、截图、业务使用流程；&lt;/li&gt;
  &lt;li&gt;Hierarchy Viewer：可视化方式，显示UI树，用途：调试、优化，用户界面；另，可以放大界面；&lt;/li&gt;
  &lt;li&gt;DDMS（Dalvik Debug Monitor Service）：Eclipse下的一个视图，用途：模拟设备的地理位置变动；&lt;/li&gt;
  &lt;li&gt;traceview：跟踪程序性能，并且具体到method；&lt;em&gt;（&lt;code&gt;Debug.startMethodtrace(FILE)&lt;/code&gt;启动跟踪）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;附录&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;几个名词&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;回归测试：修改代码之后，重新测试。&lt;/li&gt;
  &lt;li&gt;AVD：Android Virtual Devices，模拟器&lt;/li&gt;
  &lt;li&gt;SDK：Software Development Kit，软件开发平台&lt;/li&gt;
  &lt;li&gt;ADT；Android Development Tools，Eclipse下Android开发时用到的插件&lt;/li&gt;
  &lt;li&gt;ADB：Android Debug Bridge，调试桥&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;产品设计几点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;允许用户登录情况下，使用app的大部分通用功能；&lt;/li&gt;
  &lt;li&gt;当且仅当用户要使用一些核心功能时，强制用户注册、登录；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.android.com/index.html&quot;&gt;Android官方开发者网站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.android.com/develop/index.html&quot;&gt;Android官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>搭建Android开发环境</title>
     <link href="http://ningg.github.com/install-android-dev-env"/>
     <updated>2014-09-22T00:00:00+08:00</updated>
     <id>http://ningg.github.com/install-android-dev-env</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;哈哈，这个背景说不说呢？说，坦坦荡荡的：想做一个对Android手机的截屏图片，直接打马赛克的小APP，当前满足这一需求的APP有不少，例如：美图秀秀等，但是不好意思，我想要一个轻量级的，而且最简单的打码操作。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;搭建开发环境&lt;/h2&gt;

&lt;p&gt;打码APP，目标确定了，就开发搞起。&lt;em&gt;（具体功能是什么？技术方案定了吗？别急，这些我现在都不会、都不确定，个人估计折腾折腾就清晰的，我对这个还是有信心的）&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;特别提醒&lt;/strong&gt;：下面是我看官网的操作记录，请那些还有丁点技术追求的coder，也去看官网，我写blog不是为了布道，而且blog的精准、严谨程度，与官网差得太远。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;下载软件&lt;/h3&gt;

&lt;p&gt;图省事，我从官网直接下载了”Eclipse ADT bundle”，详细版本信息：”adt-bundle-windows-x86_64-20140702.zip”，其下载地址如下：&lt;a href=&quot;https://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip&quot;&gt;https://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip&lt;/a&gt; 。由于GFW的存在，很多地方无法直接下载上面链接文件，怎么办？用迅雷，复制上面的链接，新建一个迅雷下载任务，妥了，下载完毕。&lt;/p&gt;

&lt;p&gt;Eclipse ADT Bundle包含3个部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Android SDK&lt;/li&gt;
  &lt;li&gt;Eclipse IDE&lt;/li&gt;
  &lt;li&gt;ADT(Android Developer Tools)：Eclipse下进行Android开发的插件；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;客官，留意一下：上面Eclipse ADT Bundle对应的解压包中，自带了Android开发的文档，具体路径：&lt;code&gt;%ECLIPSE_ADT_BUNDLE%/sdk/docs/&lt;/code&gt;，这个极其有用，我有问题，都会偷偷看这个。&lt;/p&gt;

&lt;h3 id=&quot;package&quot;&gt;安装package&lt;/h3&gt;

&lt;p&gt;上面Eclipse ADT Bundle对应的解压包中eclipse直接可以使用了，不过很多时候，需要安装写package，来支持Android的开发。通常，通过Android SDK Manager来安装package，截个图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/install-android-dev-env/sdk-manager.jpg&quot; alt=&quot;Android SDK Manager&quot; /&gt;&lt;/p&gt;

&lt;p&gt;安装package，本来挺简单个事，由于GFW的存在，唉，上面的package基本无法下载，或者极其慢，解决办法：修改hosts文件，在其中添加片段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Google主页
203.208.46.146 www.google.com
#这行是为了方便打开Android开发官网 现在好像不VPN也可以打开
#74.125.113.121 developer.android.com
#更新的内容从以下地址下载
203.208.46.146 dl.google.com
203.208.46.146 dl-ssl.google.com
****************************************
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考来源：&lt;a href=&quot;http://www.cnblogs.com/tc310/archive/2012/12/21/2828450.html&quot;&gt;http://www.cnblogs.com/tc310/archive/2012/12/21/2828450.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;推荐书籍&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://book.douban.com/subject/25942191/&quot;&gt;第一行代码——Android&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;这个入门不错，对于有开发经验的人员也可以借鉴一下&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>编译flume：使用eclipse查看flume源码</title>
     <link href="http://ningg.github.com/build-flume"/>
     <updated>2014-09-19T00:00:00+08:00</updated>
     <id>http://ningg.github.com/build-flume</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;最近要弄日志收集系统，初始方案是将日志压缩之后，通过类似FTP方式上传，其中有一个问题：日志不能实时收集，因此，无法实时监控系统状态。Flume支持实时的日志采集，妥了，尝试用一下。&lt;/p&gt;

&lt;p&gt;说点题外话，通过类似FTP方式上传文件时，还有几个问题，自己仍在思考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;日志上传时，如何确定日志上传完成？&lt;/li&gt;
  &lt;li&gt;如果上传过程中出现意外，接收端是否会丢弃已经接收到的文件片段？&lt;/li&gt;
  &lt;li&gt;传输的文件是否压缩？&lt;/li&gt;
  &lt;li&gt;传输文件直接上传到HDFS上，还是先上传到local FS上？&lt;/li&gt;
  &lt;li&gt;日志传输到服务器上之后，如何才能立即就进行分析？&lt;/li&gt;
  &lt;li&gt;分析日志之前，怎么判断日志是否满足规范？（命名、编码等）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;编译环境&lt;/h2&gt;

&lt;p&gt;查看自己机器的环境：我用笔记本来编译的，是win 7（x64）操作系统；更详细的编译环境信息通过如下方式查看：&lt;code&gt;CMD&lt;/code&gt;–&amp;gt;&lt;code&gt;systeminfo&lt;/code&gt;，这个命令收集系统信息，需要花费40s，稍等一会儿，得到如下信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Users\Administrator&amp;gt;systeminfo

OS 名称:          Microsoft Windows 7 旗舰版
OS 版本:          6.1.7601 Service Pack 1 Build 7601

系统类型:         x64-based PC
处理器:           安装了 1 个处理器。
	 [01]: Intel64 Family 6 Model 23 Stepping 6 GenuineIntel ~785 Mhz

物理内存总量:     2,968 MB
可用的物理内存:   819 MB
虚拟内存: 最大值: 5,934 MB
虚拟内存: 可用:   2,196 MB
虚拟内存: 使用中: 3,738 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开始编译&lt;/h2&gt;

&lt;p&gt;OK，在这台Win7上，编译flume源码，走起。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;特别说明：这些内容，都是我从官网看来的，建议有点追求的coder，多看看&lt;a href=&quot;http://flume.apache.org/&quot;&gt;flume官网&lt;/a&gt;，这样才能有提高，我的博客仅仅是自己留作备份看的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-3&quot;&gt;下载源码&lt;/h3&gt;

&lt;p&gt;Apache flume的下载页面：&lt;a href=&quot;http://flume.apache.org/download.html&quot;&gt;Apache Flume Download&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我下载的是当前稳定版本flume对应的源码：&lt;a href=&quot;http://www.apache.org/dyn/closer.cgi/flume/1.5.0.1/apache-flume-1.5.0.1-src.tar.gz&quot;&gt;apache-flume-1.5.0.1-src&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;开始编译&lt;/h3&gt;

&lt;p&gt;根据官方资料：&lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLUME/Development+Environment&quot;&gt;flume开发&amp;amp;调试环境&lt;/a&gt;，开始编译。此次编译，我的目标很简单：在eclipse下查看flume的源代码。具体编译时，使用的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn install -DskipTests
mvn eclipse:eclipse -DdownloadSources
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-5&quot;&gt;出现的问题&lt;/h3&gt;

&lt;p&gt;执行命令&lt;code&gt;mvn install -DskipTests&lt;/code&gt;后，程序有一段时间静止在编译flume ng core的模块上，强行终止（操作：&lt;code&gt;ctrl + c&lt;/code&gt;）后，使用  “mvn install -rf :flume-ng-core -X “ 启动debug进行问题定位找到线索:&lt;/p&gt;

&lt;p&gt;分析之后，修改flume-ng-core\scripts\目录下&lt;code&gt;saveVersion.ps1&lt;/code&gt;，将其中powershell的两个参数&lt;code&gt;args[0]&lt;/code&gt;和&lt;code&gt;args[1]&lt;/code&gt;替换为实际值即可。在此之前，需要确认windows系统已经安装了powershell，验证是否安装powershell的方法：&lt;code&gt;运行&lt;/code&gt;–&amp;gt;&lt;code&gt;powershell&lt;/code&gt;，看看是否能够进入与&lt;code&gt;cmd&lt;/code&gt;类似的命令页面（我的win7系统默认带了powershell）。
如果没有安装powershell，请参考：&lt;a href=&quot;http://support.microsoft.com/kb/968929&quot;&gt;windows管理框架&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在编译&lt;code&gt;flume-ng-morphline-solr-sink&lt;/code&gt;过程中，由于GFW等等原因，可能无法访问&lt;code&gt; repository.cloudera.com&lt;/code&gt;，导致编译失败，失败信息详情如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ERROR] Failed to execute goal on project flume-ng-morphline-solr
-sink: Could not resolve dependencies for project org.apache.flum
e.flume-ng-sinks:flume-ng-morphline-solr-sink:jar:1.5.0.1: Failed
 to collect dependencies at org.kitesdk:kite-morphlines-all:pom:0
.12.0: Failed to read artifact descriptor for org.kitesdk:kite-mo
rphlines-all:pom:0.12.0: Could not transfer artifact org.kitesdk:
kite-morphlines-all:pom:0.12.0 from/to cdh.repo (https://reposito
ry.cloudera.com/artifactory/cloudera-repos): repository.cloudera.
com: Unknown host repository.cloudera.com -&amp;gt; [Help 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览一下，失败信息的大意是：编译&lt;code&gt;flume-ng-morphline-solr-sink&lt;/code&gt;过程中，寻找依赖(dependency)失败，这是由于远端cloudera仓库对应的域名&lt;code&gt;repository.cloudera.com&lt;/code&gt;无法解析引发的。OK，既然找不到这个cloudera仓库，那直接取消对这一仓库的引用好了，具体：修改flume-ng-sinks\flume-ng-morphline-solr-sink\目录下&lt;code&gt;pom.xml&lt;/code&gt;文件，将&lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt;元素注释掉，最终效果如表：&lt;/p&gt;

&lt;repositories&gt;

	&lt;!--
	&lt;repository&gt;
	  &lt;id&gt;cdh.repo&lt;/id&gt;
	  &lt;url&gt;https://repository.cloudera.com/artifactory/cloudera-repos&lt;/url&gt;
	  &lt;name&gt;Cloudera Repositories&lt;/name&gt;
	  &lt;snapshots&gt;
		&lt;enabled&gt;false&lt;/enabled&gt;
	  &lt;/snapshots&gt;
	&lt;/repository&gt;

	&lt;repository&gt;
	  &lt;id&gt;cdh.snapshots.repo&lt;/id&gt;
	  &lt;url&gt;https://repository.cloudera.com/artifactory/libs-snapshot-local&lt;/url&gt;
	  &lt;name&gt;Cloudera Snapshots Repository&lt;/name&gt;
	  &lt;snapshots&gt;
		&lt;enabled&gt;true&lt;/enabled&gt;
	  &lt;/snapshots&gt;
	  &lt;releases&gt;
		&lt;enabled&gt;false&lt;/enabled&gt;
	  &lt;/releases&gt;
	&lt;/repository&gt;
	--&gt;

  &lt;/repositories&gt;

&lt;p&gt;ok，重新执行命令&lt;code&gt;mvn install -DskipTests&lt;/code&gt;，欧NO，又出错了，得到如下信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ERROR] Failed to execute goal on project flume-ng-morphline-solr
-sink: Could not resolve dependencies for project org.apache.flum
e.flume-ng-sinks:flume-ng-morphline-solr-sink:jar:1.5.0.1: The fo
-llowing artifacts could not be resolved: org.kitesdk:kite-morphli
nes-all:pom:0.12.0, org.kitesdk:kite-morphlines-solr-core:jar:tes
-ts:0.12.0: Failure to find org.kitesdk:kite-morphlines-all:pom:0.
12.0 in http://repo1.maven.org/maven2 was cached in the local repo
-sitory, resolution will not be reattempted until the update inte
rval of repo1.maven.org has elapsed or updates are forced -&amp;gt; [Help 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;平复一下心情，看看上面的提示，大意是说找不到&lt;code&gt;kite-morphlines-all&lt;/code&gt;，看来之前粗鲁的将&lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt;元素注释掉，并不能解决问题，OK，再找两个替代的repository就好了，具体再次修改flume-ng-sinks\flume-ng-morphline-solr-sink\目录下&lt;code&gt;pom.xml&lt;/code&gt;文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;repositories&amp;gt;
	&amp;lt;repository&amp;gt;
		&amp;lt;id&amp;gt;maven-restlet&amp;lt;/id&amp;gt;
		&amp;lt;name&amp;gt;Public online Restlet repository&amp;lt;/name&amp;gt;
		&amp;lt;url&amp;gt;http://maven.restlet.org&amp;lt;/url&amp;gt;
	&amp;lt;/repository&amp;gt;
  &amp;lt;/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并且修改flume源代码根目录下的&lt;code&gt;pom.xml&lt;/code&gt;文件，将其中&lt;code&gt;&amp;lt;kite.version&amp;gt;0.12.0&amp;lt;/kite.version&amp;gt;&lt;/code&gt;，修改为&lt;code&gt;&amp;lt;kite.version&amp;gt;0.15.0&amp;lt;/kite.version&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;又有依赖(dependency)找不到了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ERROR] Failed to execute goal on project flume-ng-morphline-solr
-sink: Could not resolve dependencies for project org.apache.flum
e.flume-ng-sinks:flume-ng-morphline-solr-sink:jar:1.5.0.1: Failed
 to collect dependencies at org.kitesdk:kite-morphlines-all:pom:0
.12.0 -&amp;gt; org.kitesdk:kite-morphlines-useragent:jar:0.12.0 -&amp;gt; ua_p
arser:ua-parser:jar:1.3.0: Failed to read artifact descriptor for
 ua_parser:ua-parser:jar:1.3.0: Could not transfer artifact ua_pa
rser:ua-parser:pom:1.3.0 from/to maven-twttr (http://maven.twttr.
com): Connection to http://maven.twttr.com refused: Connection ti
med out: connect -&amp;gt; [Help 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再次修改flume-ng-sinks\flume-ng-morphline-solr-sink\目录下&lt;code&gt;pom.xml&lt;/code&gt;文件，在&lt;code&gt;&amp;lt;repositories&amp;gt;&lt;/code&gt;下添加一个元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;repositories&amp;gt;
	
	... 
	
	&amp;lt;repository&amp;gt;
	  &amp;lt;id&amp;gt;p2.jfrog.org&amp;lt;/id&amp;gt;
	  &amp;lt;url&amp;gt;http://p2.jfrog.org/libs-releases&amp;lt;/url&amp;gt;
	&amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新编译，还不行，说是找不到&lt;code&gt;p2.jfrog.org&lt;/code&gt;，怒了，翻墙，再编译，搞定。（有的网络环境，不需要翻墙，也能编译通过）&lt;/p&gt;

&lt;h3 id=&quot;eclipse&quot;&gt;eclipse下查看源码&lt;/h3&gt;

&lt;p&gt;上面编译之后，在eclipse下，&lt;code&gt;Import&lt;/code&gt;–&amp;gt;&lt;code&gt;Existing Projects into Workspace&lt;/code&gt;，然后选择flume编译源码的路径即可，结果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/build-flume/eclipse-flume-src.jpg&quot; alt=&quot;eclipse-src&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;疑问&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用maven管理的代码，为什么不作为maven项目Import到eclipse下？而是先运行命令&lt;code&gt;mvn eclipse:eclipse&lt;/code&gt;，然后将项目作为普通的java project导入到eclipse？&lt;/li&gt;
  &lt;li&gt;使用eclipse来查看、调试flume源码，那如何对外发布源码？&lt;/li&gt;
  &lt;li&gt;总结一下，就是一个问题&lt;code&gt;mvn eclipse:eclipse&lt;/code&gt;过程中到底执行了什么？为什么要这么做？&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;后记&lt;/strong&gt;：每次编译代码，网络都让人蛋疼，GFW让人蛋疼，有一个VPN太重要了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-6&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flume.apache.org/&quot;&gt;flume官网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/FLUME/Development+Environment&quot;&gt;flume开发&amp;amp;调试环境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>wordpress的开发调试环境</title>
     <link href="http://ningg.github.com/wordpress-debug-env"/>
     <updated>2014-09-05T00:00:00+08:00</updated>
     <id>http://ningg.github.com/wordpress-debug-env</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;用wordpress建站，两个功能：一个是展示团队工作，另一个是方便其他人进来讨论。&lt;/p&gt;

&lt;p&gt;初步立意：使用wordpress搭建两个网站，团队工作展示一个，讨论区一个；&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;组件与安装&lt;/h2&gt;

&lt;p&gt;环境：Win 7，已经安装了JDK 6 和 JDK 7&lt;/p&gt;

&lt;p&gt;下载软件清单如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;下载XAMPP：&lt;a href=&quot;https://www.apachefriends.org/zh_cn/index.html&quot;&gt;https://www.apachefriends.org/zh_cn/index.html&lt;/a&gt; 版本：1.8.3；对应PHP: 5.5.1&lt;/li&gt;
  &lt;li&gt;下载eclipse for php：&lt;a href=&quot;http://www.eclipse.org/downloads/&quot;&gt;http://www.eclipse.org/downloads/&lt;/a&gt;  版本：eclipse-php-luna-R-win32-x86_64&lt;/li&gt;
  &lt;li&gt;下载wordpress：&lt;a href=&quot;http://cn.wordpress.org/&quot;&gt;http://cn.wordpress.org/&lt;/a&gt; 版本：3.9&lt;/li&gt;
  &lt;li&gt;下载主题：
    &lt;ol&gt;
      &lt;li&gt;hum：&lt;a href=&quot;http://wordpress.org/extend/themes/hum/&quot;&gt;http://wordpress.org/extend/themes/hum/&lt;/a&gt; 版本：0.2.1&lt;/li&gt;
      &lt;li&gt;twenty eleven：&lt;a href=&quot;http://wordpress.org/themes/twentyeleven&quot;&gt;http://wordpress.org/themes/twentyeleven&lt;/a&gt; 版本：1.9&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;下载JDK：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Oracle JDK(Sun)&lt;/a&gt; 版本：JDK 7u67&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;依次安装：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;XAMPP：wordpress的运行环境&lt;/li&gt;
  &lt;li&gt;wordpress，并为其配置主题：
    &lt;ul&gt;
      &lt;li&gt;twenty eleven&lt;/li&gt;
      &lt;li&gt;hum&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;eclipse：将整个wordpress文件夹，新建为PHP Project；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-2&quot;&gt;配置&lt;/h2&gt;

&lt;p&gt;设计搭建其调试环境所需要的基本配置。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;基本配置&lt;/h3&gt;

&lt;p&gt;主要是Apache、MySQL、PHP相关：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设置MySQL的root密码，两种方式都可以：
    &lt;ol&gt;
      &lt;li&gt;CMD的命令行；&lt;/li&gt;
      &lt;li&gt;myphpAdmin图形界面；&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;主题配置&lt;/h3&gt;

&lt;p&gt;主要是为成功安装主题，所需要进行的配置。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;wordpress
    &lt;ol&gt;
      &lt;li&gt;取消twenty eleven主题中google front（因为google被墙了）&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;调试&lt;/h2&gt;

&lt;p&gt;调试是学习一个框架/语言较快的方式，这一部分将着重介绍如何进行调试。关注几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何进行调试；&lt;/li&gt;
  &lt;li&gt;PHP web基本处理逻辑；&lt;/li&gt;
  &lt;li&gt;wordpress中使用了哪些巧妙的设计，使其流行数年；&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
 
</feed>
