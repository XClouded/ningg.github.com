<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title>NingG.github.com</title>
   <link href="http://ningg.github.com/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://ningg.github.com" rel="alternate" type="text/html" />
   <updated>2015-03-26T00:02:43+08:00</updated>
   <id>http://ningg.github.com</id>
   <author>
     <name></name>
     <email></email>
   </author>

   
   <entry>
     <title>Git入门</title>
     <link href="http://ningg.github.com/git-intro"/>
     <updated>2015-03-25T00:00:00+08:00</updated>
     <id>http://ningg.github.com/git-intro</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;立意&lt;/h2&gt;

&lt;p&gt;几点想法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git的常用操作&lt;/li&gt;
  &lt;li&gt;Git的基本原理，操作是附属于原理的，对原理的把握，两点好处：方便记忆Git的操作，方便快速定位问题；&lt;/li&gt;
  &lt;li&gt;典型场景下Git的使用
    &lt;ul&gt;
      &lt;li&gt;dev、prod等多个分支如何组织？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本思路：整体上，系统参考几个内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/book/zh/v1&quot;&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot;&gt;git - 简明指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://marklodato.github.io/visual-git-guide/index-zh-cn.html&quot;&gt;图解Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lookenwu/p/3925308.html&quot;&gt;快学Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;几个结果：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;快学Git：git相关的基本操作，不涉及过多原理；&lt;/li&gt;
  &lt;li&gt;详细整理Git：侧重Git的原理，以及常见场景下，Git的用法；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：在之前的&lt;a href=&quot;/project-flume-ng-extends-source&quot;&gt;一篇文章&lt;/a&gt;中也涉及过Git的使用。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/book/zh/v1&quot;&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot;&gt;git - 简明指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://marklodato.github.io/visual-git-guide/index-zh-cn.html&quot;&gt;图解Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lookenwu/p/3925308.html&quot;&gt;快学Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;闲谈&lt;/h2&gt;

&lt;p&gt;前一段时间得知消息 &lt;code&gt;**&lt;/code&gt; 队伍，逐渐兵强马壮，并且被邀请上了一个山头，做起了事业；细看他们的做法，他们队长在开始的时候，相信 &lt;code&gt;人生要独辟蹊径&lt;/code&gt; 这么个说法，然后，在做事情的时候，他们战略立意为：时间紧迫，做好事情，抓住机会，成立队伍，把事情做好、做丰富，合适机会出现的时候，就做事业。实际上一年半之前，我们队伍与 &lt;code&gt;**&lt;/code&gt; 队伍做的事情是相似的，但我们战略上没有定位，基本想法是：有事情做就把事情做好，一起做事，一起吃肉。最后，毕业了，我们的小队伍，散伙，各自谋生。当然，我认为造成当前与 &lt;code&gt;**&lt;/code&gt; 队伍巨大差异的原因有很多，但我们战略立意太低了，没有战略定位，到头来，就成了混日子，能偷懒的时候，都偷懒了，一年回头一看，啥事情都没做成。我作为队伍的大佬之一，对此反思，下次有机会跟当时队伍大佬 &lt;code&gt;2W&lt;/code&gt; 见面了，好好扯扯这个事。&lt;/p&gt;

&lt;p&gt;上面为什么提到这个战略定位呢？是想说无论事情大小，都要有个清晰、适当的战略目标，以此避免因为短期视野局限，迷失方向，浪费精力；时间太宝贵了，关键不可逆啊。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>产品分析、设计基本流程</title>
     <link href="http://ningg.github.com/create-effective-product-protype"/>
     <updated>2015-03-25T00:00:00+08:00</updated>
     <id>http://ningg.github.com/create-effective-product-protype</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;原文地址：&lt;a href=&quot;http://ued.taobao.org/blog/2014/05/%E9%AB%98%E6%95%88%E8%BE%93%E5%87%BA%E7%A7%BB%E5%8A%A8app%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B/&quot;&gt;高效输出移动app产品原型&lt;/a&gt;。本文在原文基础上，进行适当的调整，添加了自己的理解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目标：输出移动 app 产品原型，高效的实现这个目标。&lt;/p&gt;

&lt;p&gt;几个特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;产品思路，清晰&lt;/li&gt;
  &lt;li&gt;协同合作，顺畅&lt;/li&gt;
  &lt;li&gt;素材元素，齐备&lt;/li&gt;
  &lt;li&gt;体验感受，真实 &lt;em&gt;（做出的原型）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体操作步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;产品流程图，界面为单位&lt;/li&gt;
  &lt;li&gt;基础原型控件，可修改&lt;/li&gt;
  &lt;li&gt;动态原型，可点击&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下文将分开来说上面的 3 个操作步骤。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;产品流程图，界面为单位&lt;/h2&gt;

&lt;p&gt;高校输出，首先要保证产品的整体思路要正确，这点可以从产品流程中体现出来。移动产品需要做到聚焦，因为手机界面的大小，用户的碎片化使用等等，所以一个界面上必然不可能出现太多的内容和行动点，这就保证了我们可以用最简洁的方式来画流程。以界面为单位，定义 &lt;code&gt;界面标题&lt;/code&gt; 和 &lt;code&gt;主要内容&lt;/code&gt;，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/single-element.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上述页面为单位，来画流程，下面以一个app的登录注册为例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/complete-flow-chart.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上述的产品流程图，有几个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;快速了解产品有多少页面；&lt;/li&gt;
  &lt;li&gt;检验用户路径是否太长；&lt;/li&gt;
  &lt;li&gt;形式简单，方便讨论修改；&lt;em&gt;（visio中能够批注吗？留下痕迹）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;疑问&lt;/strong&gt;：手机界面小，需要聚焦，因此以 &lt;code&gt;界面&lt;/code&gt; 为单位，绘制最简洁的流程；那 PC 端的产品流程图，如何画？&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;基础原型控件，可修改&lt;/h2&gt;

&lt;p&gt;如何快速产出高保真原型？一套备用的基础原型控件，必不可少。大部分设计师一般利用axure来完成产品原型，所以从协同合作的角度，本文专门在axure里制作了整套最常用的移动产品组控件。设计师只要改文字，改颜色，摆位置就可以完成简单的高保真原型。基础组控件截图如下：&lt;a href=&quot;http://pan.baidu.com/s/1kTjy1Xd&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/gbz03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以此控件为例子，在之前提到的app登录注册例子，快速组件高保真原型，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/gbz04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于设计上很多细节，大家可以查考书籍&lt;a href=&quot;http://product.dangdang.com/23434009.html&quot;&gt;方寸指间——移动设计实战手册&lt;/a&gt;，里面涉及到很多最基本的移动设计知识。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;动态原型，可点击&lt;/h2&gt;

&lt;p&gt;完成高保真原型，根据流程图，可以很方便制作出在手机上可体验的动态效果，让产品人员或用户真实感受app实际的效果。这里推荐一个特别简单的方法，登录&lt;a href=&quot;https://www.flinto.com/&quot;&gt;Flinto&lt;/a&gt;，完成注册，将高保真原型以图片的方式导入，通过链接和专长方式选择，就可以很方便地在手机上查看。网站提供的指导比较具体，大家可以直接查看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/gbz06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>Web相关的Specifications</title>
     <link href="http://ningg.github.com/web-application-specifications"/>
     <updated>2015-03-24T00:00:00+08:00</updated>
     <id>http://ningg.github.com/web-application-specifications</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;原文地址：&lt;a href=&quot;http://wiki.apache.org/tomcat/Specifications&quot;&gt;Tomcat - Specifications&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;列一下目录：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Application Specifications
    &lt;ul&gt;
      &lt;li&gt;Overview&lt;/li&gt;
      &lt;li&gt;Java Servlet Specifications&lt;/li&gt;
      &lt;li&gt;JavaServer Pages and Expression Language Specifications&lt;/li&gt;
      &lt;li&gt;Java API for WebSocket&lt;/li&gt;
      &lt;li&gt;See Also&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Protocol Specifications
    &lt;ul&gt;
      &lt;li&gt;HTTP
        &lt;ul&gt;
          &lt;li&gt;Related Specifications&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;AJP&lt;/li&gt;
      &lt;li&gt;SPDY&lt;/li&gt;
      &lt;li&gt;HTTP/2&lt;/li&gt;
      &lt;li&gt;WebSocket&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>Java Servlet Specifications 3.0 - JSR315</title>
     <link href="http://ningg.github.com/java-servlet-specifications-3.0-jsr315"/>
     <updated>2015-03-24T00:00:00+08:00</updated>
     <id>http://ningg.github.com/java-servlet-specifications-3.0-jsr315</id>
     <content type="html">&lt;p&gt;参考&lt;a href=&quot;http://wiki.apache.org/tomcat/Specifications&quot;&gt;Tomcat - Specifications&lt;/a&gt;中整理的内容，直接对Servlet 3.0先来一个整体的概述：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spec versions&lt;/td&gt;
      &lt;td&gt;Servlet 3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Main page&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://jcp.org/aboutJava/communityprocess/final/jsr315/index.html&quot;&gt;JSR315&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Online Javadoc&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://docs.oracle.com/javaee/6/api/&quot;&gt;Java EE 6 API&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Stable:&lt;/td&gt;
      &lt;td&gt;Final Release&lt;/td&gt;
      &lt;td&gt;Maintenance Release (Version 3.0 Rev a)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date:&lt;/td&gt;
      &lt;td&gt;10 Dec, 2009&lt;/td&gt;
      &lt;td&gt;6 Feb, 2011&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Download Page:&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://jcp.org/aboutJava/communityprocess/final/jsr315/index.html&quot;&gt;Overview&lt;/a&gt;，&lt;a href=&quot;http://download.oracle.com/otndocs/jcp/servlet-3.0-fr-eval-oth-JSpec/&quot;&gt;Direct Download&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://jcp.org/aboutJava/communityprocess/mrel/jsr315/index.html&quot;&gt;Overview&lt;/a&gt;，&lt;a href=&quot;http://download.oracle.com/otndocs/jcp/servlet-3.0-mrel-eval-oth-JSpec/&quot;&gt;Direct Download&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;疑问&lt;/strong&gt;：JSR的两个版本&lt;code&gt;Final Release&lt;/code&gt;和&lt;code&gt;Maintenance Release&lt;/code&gt;什么区别？
&lt;strong&gt;RE&lt;/strong&gt;：JCP 正式发布的规范称为 &lt;code&gt;Final Release&lt;/code&gt;，如果进行修改、升级，则重新发布为 &lt;code&gt;Maintenance Release&lt;/code&gt;。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>Tomcat 入门</title>
     <link href="http://ningg.github.com/tomcat-intro"/>
     <updated>2015-03-23T00:00:00+08:00</updated>
     <id>http://ningg.github.com/tomcat-intro</id>
     <content type="html">&lt;p&gt;几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何安装、启动Tomcat？&lt;/li&gt;
  &lt;li&gt;Tomcat中常用的配置，以及含义？&lt;/li&gt;
  &lt;li&gt;Tomcat的基本原理？
    &lt;ul&gt;
      &lt;li&gt;Tomcat的运行机制；&lt;/li&gt;
      &lt;li&gt;web在Tomcat中的处理过程；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;Apache Tomcat，开源软件&lt;em&gt;（这句是废话）&lt;/em&gt;，支持Java Servlet和JavaServer Pages（JSP）的实现，具体Java Servlet和JavaServer Pages specification是由JCP（Java Community Process）主导制定。&lt;/p&gt;

&lt;h2 id=&quot;tomcat&quot;&gt;安装、启动Tomcat&lt;/h2&gt;

&lt;p&gt;几个步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;到&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Apache Tomcat&lt;/a&gt;下载Tomcat 7.0.59；&lt;/li&gt;
  &lt;li&gt;解压；&lt;/li&gt;
  &lt;li&gt;执行&lt;code&gt;$APACHE_HOMT/bin/startup.bat&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;通过浏览器访问：&lt;code&gt;http://localhost:8080&lt;/code&gt;即可看到Tomcat主页面；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实际上，执行&lt;code&gt;$APACHE_HOMT/bin/startup.bat&lt;/code&gt;后，会出现如下信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-3-23 16:51:55 org.apache.coyote.AbstractProtocol start
信息: Starting ProtocolHandler [&quot;http-apr-8080&quot;]
2015-3-23 16:51:55 org.apache.coyote.AbstractProtocol start
信息: Starting ProtocolHandler [&quot;ajp-apr-8009&quot;]
2015-3-23 16:51:55 org.apache.catalina.startup.Catalina start
信息: Server startup in 691 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述信息中，出现的两个数字&lt;code&gt;8080&lt;/code&gt;、&lt;code&gt;8009&lt;/code&gt;为Tomcat默认监听的端口。&lt;/p&gt;

&lt;h2 id=&quot;tomcat-1&quot;&gt;Tomcat常用配置&lt;/h2&gt;

&lt;p&gt;（常用场景）&lt;/p&gt;

&lt;h2 id=&quot;tomcat-2&quot;&gt;Tomcat基本原理&lt;/h2&gt;

&lt;p&gt;推荐资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.datadisk.co.uk/html_docs/java_app/tomcat6/tomcat6.htm&quot;&gt;Tomcat/Apache 6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_More.html&quot;&gt;Apache Tomcat 7-more about the cat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html&quot;&gt;How to Install Apache Tomcat and Get Started with Java Servlet Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;疑问：tomcat运行时，是一个Process，那在tomcat容器中部署的web应用，是作为process启动的？还是直接thread？&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Apache Tomcat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_More.html&quot;&gt;Apache Tomcat 7-more about the cat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html&quot;&gt;How to Install Apache Tomcat and Get Started with Java Servlet Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;杂谈&lt;/h2&gt;

&lt;p&gt;重走web路，一年多没碰web的东西，该忘的都忘了，用到的时候，需要重新查阅，现在只有解决问题的基本思路，索性借着这次重新使用java web的机会把整体的内容再过一遍。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>面向对象设计原则</title>
     <link href="http://ningg.github.com/object-oriented-design-principles"/>
     <updated>2015-03-23T00:00:00+08:00</updated>
     <id>http://ningg.github.com/object-oriented-design-principles</id>
     <content type="html">&lt;p&gt;SOLID是面向对象设计和编程（OOD&amp;amp;OOP）中的重要编码原则：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SRP&lt;/td&gt;
      &lt;td&gt;The Single Responsibility Principle&lt;/td&gt;
      &lt;td&gt;单一责任&lt;/td&gt;
      &lt;td&gt;一个类，有且只有一个更改的原因&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OCP&lt;/td&gt;
      &lt;td&gt;The Open Closed Principle&lt;/td&gt;
      &lt;td&gt;开放封闭&lt;/td&gt;
      &lt;td&gt;不能修改类，可以扩展类&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LSP&lt;/td&gt;
      &lt;td&gt;The Liskov Substitution Principle&lt;/td&gt;
      &lt;td&gt;里氏替换&lt;/td&gt;
      &lt;td&gt;子类，可以替换基类&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ISP&lt;/td&gt;
      &lt;td&gt;The Interface Segregation Principle&lt;/td&gt;
      &lt;td&gt;接口分离&lt;/td&gt;
      &lt;td&gt;细粒度的接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DIP&lt;/td&gt;
      &lt;td&gt;The Dependency Inversion Principle&lt;/td&gt;
      &lt;td&gt;依赖反转&lt;/td&gt;
      &lt;td&gt;依赖抽象而不是具体实现&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;额外说几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SOLID原则是 class 级别的，与测试工具一起，更能发挥效力；&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/567768/Object-Oriented-Design-Principles&quot;&gt;Object Oriented Design Principles&lt;/a&gt;和&lt;a href=&quot;http://www.importnew.com/10656.html&quot;&gt;面向对象设计原则和创建SOLID应用的5个方法&lt;/a&gt;中有详细的例子，说明代码的书写规范。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;代码腐坏的几个现象：&lt;/h2&gt;

&lt;p&gt;代码变质，有几个现象：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;僵化：小的变化，导致整个系统重建；&lt;/li&gt;
  &lt;li&gt;脆弱：一个模块的变化，导致其他不不相关的模块异常。例如，汽车系统中，调整电台会影响到窗户的使用；&lt;/li&gt;
  &lt;li&gt;固定：一个模块，无法被抽取，并且在新环境中重用，例如登录模块，这是由于各个模块之间的耦合和依赖造成的额，改进策略是，从底层细节，比如特定数据库、UI实现、特殊框架等解耦核心对象；&lt;/li&gt;
  &lt;li&gt;粘性：代码构建、测试要花费很长时间；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个软件项目，满足当前功能，是最基本的要求；而实际上，良好实现的软件项目，能在满足当前功能基础上，满足未来二次开发、维护的需要。软件项目的完整成本分为：开发成本、二次开发成本、维护成本。&lt;/p&gt;

&lt;h2 id=&quot;single-responsibility&quot;&gt;单一责任（Single Responsibility）&lt;/h2&gt;

&lt;p&gt;一个类只做一种类型的责任，当需要承担其他类型责任时，分解这个类。&lt;/p&gt;

&lt;p&gt;下面的代码有多少职责？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Employee {
  public Pay calculatePay() {...}
  public void save() {...}
  public String describeEmployee() {...}
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正确答案是3个。&lt;/p&gt;

&lt;p&gt;在一个类中混合了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支付的计算逻辑&lt;/li&gt;
  &lt;li&gt;数据库逻辑&lt;/li&gt;
  &lt;li&gt;描述逻辑&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你将多个职责结合在一个类中，可能很难实现修改一部分时不会破坏其他部分。混合职责也使这个类难以理解，测试，降低了内聚性。修改它的最简单方法是将这个类分割为三个不同的相互分离的类，每个类仅仅有一个职责：数据库访问，支付计算和描述。&lt;/p&gt;

&lt;h2 id=&quot;open-closed&quot;&gt;开放封闭（Open Closed）&lt;/h2&gt;

&lt;p&gt;对继承、扩展，是开放的；对修改，是封闭的。使用抽象类和接口。&lt;/p&gt;

&lt;p&gt;为依赖关系使用接口的另一个作用是减少耦合和增加灵活性。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void checkOut(Receipt receipt) {
  Money total = Money.zero;
  for (item : items) {
	total += item.getPrice();
	receipt.addItem(item);
  }
  Payment p = acceptCash(total);
  receipt.addPayment(p);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么增加信用卡支持该怎么做？你可能像下面的增加if语句，但这违反OCP原则。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Payment p;
if (credit)
  p = acceptCredit(total);
else
  p = acceptCash(total);
receipt.addPayment(p);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更好的解决方案是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface PaymentMethod {void acceptPayment(Money total);}
  
void checkOut(Receipt receipt, PaymentMethod pm) {
  Money total = Money.zero;
  for (item : items) {
	total += item.getPrice();
	receipt.addItem(item);
  }
  Payment p = pm.acceptPayment(total);
  receipt.addPayment(p);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这儿有一个小秘密：OCP仅仅用于未来变化可预见的情况，当未来变化发生时，采用OCP。因此，需要准确地预见将来的变化。
这意味着等待用户做出改变，然后使用抽象应对将来的类似变化。&lt;/p&gt;

&lt;p&gt;个人理解：通过抽象类、接口，实现，对扩展、新增开放，对修改关闭。&lt;/p&gt;

&lt;h2 id=&quot;liskov-substitution&quot;&gt;里氏替换（Liskov Substitution）&lt;/h2&gt;

&lt;p&gt;子类的对象实例，应该能够替换任何其超类的实例，即，子类必须符合父类的预期行为&lt;em&gt;（隐含的行为约束）&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;下面几种情况，违反了LSP原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;子类抛出父类没有抛出的异常；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个违反LSP的典型例子是Square类派生于Rectangle类。Square类总是假定宽度与高度相等。如果一个正方形对象用于期望一个长方形的上下文中，可能会出现意外行为，因为一个正方形的宽高不能(或者说不应该)被独立修改。&lt;/p&gt;

&lt;p&gt;解决这个问题并不容易：如果修改Square类的setter方法，使它们保持正方形不变(即保持宽高相等)，那么这些方法将弱化(违反)Rectangle类setter方法，在长方形中宽高可以单独修改。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Rectangle {
  private double height;
  private double width;
  
  public double area();
  
  public void setHeight(double height);
  public void setWidth(double width);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码违反了LSP。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Square extends Rectangle {  
  public void setHeight(double height) {
	super.setHeight(height);
	super.setWidth(height);
  }
  
  public void setWidth(double width) {
	setHeight(width);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;违反LSP导致不明确的行为。不明确的行为意味着它在开发过程中运行良好但在产品中出现问题，或者要花费几个星期调试每天只出现一次的bug，或者不得不查阅数百兆日志找出什么地方发生错误。&lt;/p&gt;

&lt;p&gt;个人理解：子类可以替换父类。&lt;/p&gt;

&lt;h2 id=&quot;interface-segregation&quot;&gt;接口分离（Interface Segregation）&lt;/h2&gt;

&lt;p&gt;不能强迫用户去依赖那些他们不适用的接口。换句话说，使用多个专门的接口，比使用单一的总接口要好。&lt;/p&gt;

&lt;p&gt;想象一个ATM取款机，通过一个屏幕显示我们想要的不同信息。你会如何解决显示不同信息的问题？我们使用SRP,OCP和LSP想出一个方案，但是这个系统仍然很难维护。这是为什么？&lt;/p&gt;

&lt;p&gt;想象ATM的所有者想要添加仅在取款功能出现的一条信息，“ATM机将在您取款时收取一些费用，您同意吗”。你会如何解决？&lt;/p&gt;

&lt;p&gt;可能你会给Messenger接口增加一个方法并使用这个方法完成。但是这会导致重新编译这个接口的所有使用者，几乎所有的系统需要重新部署，这直接违反了OCP。让代码腐坏开始了！&lt;/p&gt;

&lt;p&gt;这里出现了这样的情形：对于取款功能的改变导致其他全部非相关功能也变化，我们现在知道这并不是我们想要的。这是怎么回事？&lt;/p&gt;

&lt;p&gt;其实，这里是向后依赖在作怪，使用了该Messenger接口每个功能依赖了它不需要，但是被其他功能需要的方法，这正是我们想要避免的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface Messenger {
  askForCard();
  tellInvalidCard();
  askForPin();
  tellInvalidPin();
  tellCardWasSiezed();
  askForAccount();
  tellNotEnoughMoneyInAccount();
  tellAmountDeposited();
  tellBalance();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相反，将Messenger接口分割，不同的ATM功能依赖于分离的Messenger。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface LoginMessenger {
  askForCard();
  tellInvalidCard();
  askForPin();
  tellInvalidPin(); 
}
  
public interface WithdrawalMessenger {
  tellNotEnoughMoneyInAccount();
  askForFeeConfirmation();
}
  
publc class EnglishMessenger implements LoginMessenger, WithdrawalMessenger {
  ...   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;个人理解：接口功能单一，多接口之间隔离；避免单一的总接口。&lt;/p&gt;

&lt;h2 id=&quot;dependency-inversion&quot;&gt;依赖反转（Dependency Inversion）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;高层模块，不应依赖于底层模块，二者都应依赖于抽象；&lt;/li&gt;
  &lt;li&gt;抽象不应该依赖于细节，细节应该依赖于抽象；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例子：一个程序依赖于Reader和Writer接口，Keyboard和Printer作为依赖于这些抽象的细节实现了这些接口。CharCopier是依赖于Reader和Writer实现类的低层细节，可以传入任何实现了Reader和Writer接口的设备正确地工作。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface Reader { char getchar(); }
public interface Writer { void putchar(char c)}
  
class CharCopier {
  
  void copy(Reader reader, Writer writer) {
	int c;
	while ((c = reader.getchar()) != EOF) {
	  writer.putchar();
	}
  }
}
  
public Keyboard implements Reader {...}
public Printer implements Writer {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;个人理解：通过接口，实现上下层之间的隔离。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot;&gt;the principles of OOD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.importnew.com/10656.html&quot;&gt;面向对象设计原则和创建SOLID应用的5个方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codeproject.com/Articles/567768/Object-Oriented-Design-Principles&quot;&gt;Object Oriented Design Principles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>Spring搭建 java web 的基本架子</title>
     <link href="http://ningg.github.com/java-web"/>
     <updated>2015-03-23T00:00:00+08:00</updated>
     <id>http://ningg.github.com/java-web</id>
     <content type="html">&lt;p&gt;目标：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;搭建一个基本的java web架子，包括：
    &lt;ul&gt;
      &lt;li&gt;前端数据发送、接收；&lt;/li&gt;
      &lt;li&gt;后端数据处理；&lt;/li&gt;
      &lt;li&gt;数据存储；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;整理使用Spring搭建架子的基本过程，以及注意事项；&lt;/li&gt;
  &lt;li&gt;重新熟悉Spring思路，整理这一基本思路；&lt;em&gt;（关键）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;补充：Spring涵盖的内容很广，此次主要涉及Spring web部分知识。&lt;/p&gt;

&lt;p&gt;利用spring，搭建java web架子，整体分为几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基本的后端处理架子
    &lt;ul&gt;
      &lt;li&gt;Spring&lt;/li&gt;
      &lt;li&gt;Hibernate + Spring jdbc&lt;/li&gt;
      &lt;li&gt;MyBatis &lt;em&gt;（尚未熟悉）&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基本的前端展示架子&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;工具&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;工具&lt;/th&gt;
      &lt;th&gt;版本&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;MyEclipse&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;java web IDE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-1&quot;&gt;后端架子&lt;/h2&gt;

&lt;h3 id=&quot;spring&quot;&gt;Spring&lt;/h3&gt;

&lt;h2 id=&quot;section-2&quot;&gt;常见问题&lt;/h2&gt;

&lt;h3 id=&quot;myeclipse&quot;&gt;MyEclipse的环境配置&lt;/h3&gt;

&lt;p&gt;在使用MyEclipse时，需要进行的前期配置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JDK&lt;/li&gt;
  &lt;li&gt;Maven
    &lt;ul&gt;
      &lt;li&gt;Maven的JDK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;myeclipsemavenjava-web&quot;&gt;MyEclipse下，maven管理java web工程&lt;/h3&gt;

&lt;p&gt;在Myeclipse下，创建web project时，选中&lt;code&gt;Add maven support&lt;/code&gt;，一路点击&lt;code&gt;Next&lt;/code&gt;，后面有两个选项：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MyEclipse JEE project structure：标准Java EE结构；&lt;/li&gt;
  &lt;li&gt;Standard Maven JEE project structure &lt;em&gt;（推荐）&lt;/em&gt;：Maven的标准结构；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UPDATE：20150325，分两步，从简单的来，先用&lt;code&gt;MyEclipse JEE project structure&lt;/code&gt;，后期再尝试新建工程，使用&lt;code&gt;Standard Maven JEE project structure&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;todo&quot;&gt;TODO&lt;/h3&gt;

&lt;p&gt;几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;java web上如何登记对数据库的修改&lt;/li&gt;
  &lt;li&gt;maven管理的java web如何发布？如何debug测试？
    &lt;ul&gt;
      &lt;li&gt;直接在server下进行deploy就可以了吗？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;参考来源&lt;/h2&gt;

</content>
   </entry>
   
   <entry>
     <title>Java WAR包的格式</title>
     <link href="http://ningg.github.com/java-war-format"/>
     <updated>2015-03-23T00:00:00+08:00</updated>
     <id>http://ningg.github.com/java-war-format</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;java web 工程，包含几部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;web components &lt;em&gt;（是什么？）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;web resources，例如静态图片等；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 java web，几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;需要符合 Java Servlet specification；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;war&quot;&gt;WAR格式&lt;/h2&gt;

&lt;p&gt;WAR格式，就是部署java web的目录组织结构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/java-war-format/web-module-structure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于目录结构，几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assembly Root，整个java web的根目录；&lt;/li&gt;
  &lt;li&gt;WEB-INF，核心处理逻辑的位置；
    &lt;ul&gt;
      &lt;li&gt;web.xml，web资源表述文件；&lt;/li&gt;
      &lt;li&gt;classes目录，核心处理逻辑代码；&lt;/li&gt;
      &lt;li&gt;lib目录，依赖的jar包；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web pages，展示页面所需要的资源，通常也需要如下几个目录：&lt;/li&gt;
  &lt;li&gt;img目录 &lt;em&gt;（可选）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;css目录 &lt;em&gt;（可选）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;js目录 &lt;em&gt;（可选）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;META-INF &lt;em&gt;（可选）&lt;/em&gt; ，打包为war的元信息数据；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mavenjava-web&quot;&gt;Maven构建时，java web目录结构&lt;/h2&gt;

&lt;p&gt;本部分将着重开发过程中，Maven构建时，java web目录结构。注意，使用Maven管理的java project与java web project，基本类似：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pom.xml，maven的工程对象模型（Project Object Module）&lt;/li&gt;
  &lt;li&gt;src/main/java，项目类&lt;/li&gt;
  &lt;li&gt;src/main/resources，项目资源&lt;/li&gt;
  &lt;li&gt;src/test/java，测试类&lt;/li&gt;
  &lt;li&gt;src/test/resources，测试资源&lt;/li&gt;
  &lt;li&gt;src/main/webapp，web资源的目录&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（下面给出一个截图）&lt;/p&gt;

&lt;p&gt;疑问：JSTL的作用？JSP Standard Tag Library，JSP标准标签库。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javaee/7/tutorial/packaging003.htm&quot;&gt;Java EE 7 Tutorial - Packaging Web Archives&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javaee/7/index.html&quot;&gt;Java Platform, Enterprise Edition (Java EE) 7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/WAR_%28file_format%29&quot;&gt;wiki：war file format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;闲谈&lt;/h2&gt;

&lt;p&gt;WAR，对应查看Java EE 的帮助文档；JAR，对应查看Java SE 的帮助文档。需要花时间浏览一遍Java EE Tutorial。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>Kibana入门操作</title>
     <link href="http://ningg.github.com/kibana-intro"/>
     <updated>2015-03-16T00:00:00+08:00</updated>
     <id>http://ningg.github.com/kibana-intro</id>
     <content type="html">&lt;p&gt;当前使用组件的版本：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;组件&lt;/th&gt;
      &lt;th&gt;版本&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ElasticSearch&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;1.4.4&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Java&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;1.7.0_67&lt;/code&gt; HotSpot(64) 64-Bit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kibana&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;kibana-4.0.1-linux-x64&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section&quot;&gt;启动&lt;/h2&gt;

&lt;p&gt;Kibana本质就是一个Web工程，启动命令：&lt;code&gt;bin/kibana&lt;/code&gt;，具体查看启动脚本，发现最终启动的是NodeJS相关的服务：&lt;code&gt;bin/../node/bin/node bin/../src/bin/kibana.js&lt;/code&gt;，NodeJS我不懂，具体没看明白。几个疑问：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何后台启动Kibana？
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;nohup bin/kibana &amp;amp;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Kibana运行日志位置？&lt;/li&gt;
  &lt;li&gt;如何监控Kibana运行状态？&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>Trello快捷操作</title>
     <link href="http://ningg.github.com/trello-shortcuts"/>
     <updated>2015-03-15T00:00:00+08:00</updated>
     <id>http://ningg.github.com/trello-shortcuts</id>
     <content type="html">&lt;p&gt;用鼠标点来点去，效率有点低，内心略感焦急，有没有快捷键？赶快找一下，基本思路还是寻找官方的引导和帮助文档，下面列一下我寻找shortcuts的基本路线吧：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://trello.com/yourway&quot;&gt;New Stuff&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://help.trello.com/&quot;&gt;Help Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;搜索 &lt;code&gt;shortcuts&lt;/code&gt; 关键字&lt;/li&gt;
  &lt;li&gt;哈哈，找到：&lt;a href=&quot;http://help.trello.com/article/798-using-keyboard-shortcuts-in-trello&quot;&gt;Using keyboard shortcuts in Trello&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shortcuts&quot;&gt;shortcuts&lt;/h2&gt;

&lt;p&gt;You can also press &lt;code&gt;?&lt;/code&gt; on your keyboard while in Trello to view a list of shortcuts.&lt;/p&gt;

&lt;p&gt;Here are some of the highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The “b” shortcut which opens the boards menu and lets you search for boards instantly. Press “b”, type the first few letters of the board you’re looking for, press enter, and you’re there. It’s the fastest way to switch boards.&lt;/li&gt;
  &lt;li&gt;“f” opens the card filter while on a board. You can instantly start searching for cards by title. The filter will also suggest members and labels, so you can start typing “da” and it will suggest Daniel. Press enter to see cards assigned to him. Press “x” to clear a filter.&lt;/li&gt;
  &lt;li&gt;“t” will edit the card title and “e” will edit the card description. You can press it while on the card back, or hover over a card, press either one, and the card will open up and then begin editing the chosen field.&lt;/li&gt;
  &lt;li&gt;“j” and “k” select the card above or below the current card. So do the up and down arrows.&lt;/li&gt;
  &lt;li&gt;Press “n” while hovering over any card to open the card composer right below the selected card.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为方便自己记忆，简单总结一下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;快捷键&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;查询快捷键列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;打开Board面板&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;f&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;过滤Board下List下，不同Label的Card&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;x&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;与上述&lt;code&gt;f&lt;/code&gt;操作对应，取消过滤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在Card内，编辑title&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在Card内，编辑description&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;w&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;显示\隐藏 sidebar&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Trello内部结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Trello（ROOT）
	|
	|--Board
	|--Board(`b`)
		|
		|--List
		|--List
			|
			|--Card
			|--Card(`f`|`x`)
				|
				|--edit Title (`t`)
				|--Edit description (`e`)
				|--选中相邻的Card(`j`|`k`)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://help.trello.com/&quot;&gt;Help Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://trello.com/yourway&quot;&gt;New Stuff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
 
</feed>
