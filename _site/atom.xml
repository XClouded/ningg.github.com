<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title>ningg.top</title>
   <link href="http://ningg.top/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://ningg.top" rel="alternate" type="text/html" />
   <updated>2015-04-06T09:39:08+08:00</updated>
   <id>http://ningg.top</id>
   <author>
     <name></name>
     <email></email>
   </author>

   
   <entry>
     <title>Maven中pom文件如何编写</title>
     <link href="http://ningg.github.com/maven-pom-file"/>
     <updated>2015-04-05T00:00:00+08:00</updated>
     <id>http://ningg.github.com/maven-pom-file</id>
     <content type="html">&lt;h2 id=&quot;properties&quot;&gt;properties定义与调用&lt;/h2&gt;

&lt;p&gt;定义，典型的xml定义属性的方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
	&amp;lt;spring.version&amp;gt;4.1.6.RELEASE&amp;lt;/spring.version&amp;gt;
&amp;lt;properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用，与shell中调用变量一致：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;疑问：xml变量的定义，有规范吗？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sysout.println();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dependencyscope&quot;&gt;dependency的内scope的含义&lt;/h2&gt;

&lt;p&gt;几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;scope的含义；&lt;/li&gt;
  &lt;li&gt;scope都有哪些取值；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;如何注释？&lt;/h2&gt;

&lt;p&gt;xml中如何注释？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;!- -&amp;gt;&lt;/code&gt;&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>Kafka 0.8.2.0 删除Topic</title>
     <link href="http://ningg.github.com/kafka-delete-topic"/>
     <updated>2015-04-01T00:00:00+08:00</updated>
     <id>http://ningg.github.com/kafka-delete-topic</id>
     <content type="html">&lt;p&gt;几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;修改Kafka的配置文件，Kafka节点会自动生效吗？&lt;/li&gt;
  &lt;li&gt;逐个修改Kafka节点，并逐个重启Kafka节点，是否可以？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改Kafka配置文件，增加可删除Topic的设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete.topic.enable=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，逐个重启Kafka节点，即可。逐个重启Kafka节点，而对其他系统没有影响，是因为之前已经设置每个数据备份两份：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# The default replication factor for automatically created topics.
default.replication.factor=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述，开启可删除topic标识之后，可以删除Topic，操作如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bin/kafka-topics.sh --zookeeper zk_host:port/chroot --delete --topic my_topic_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，通过如下命令可以查看topic状态：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bin/kafka-topics.sh --zookeeper 168.7.2.165 --list
fdiy - marked for deletion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;疑问：为什么topic：fdiy还存在？并且还被标记上&lt;code&gt;marked for deletion&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;（TODO）&lt;/p&gt;

&lt;p&gt;关于上述&lt;code&gt;marked for deletion&lt;/code&gt;的现象，当前并不能确定原因，todo&lt;/p&gt;

&lt;p&gt;参考来源：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Command+Line+and+Related+Improvements&quot;&gt;Kafka Command Line and Related Improvements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://comments.gmane.org/gmane.comp.apache.kafka.user/6686&quot;&gt;Problem deleting topics in 0.8.2?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kafka.apache.org/documentation.html&quot;&gt;Kafka 0.8.2 Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16284399/purge-kafka-queue&quot;&gt;Purge Kafka Queue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/17730905/is-there-a-way-to-delete-all-the-data-from-a-topic-or-delete-the-topic-before-ev&quot;&gt;Is there a way to delete all the data from a topic or delete the topic before every run?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>JQuery EasyUI入门简介</title>
     <link href="http://ningg.github.com/easyui-intro"/>
     <updated>2015-04-01T00:00:00+08:00</updated>
     <id>http://ningg.github.com/easyui-intro</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wuhuacong/p/3281103.html&quot;&gt;基于MVC4+EasyUI的Web开发框架形成之旅–总体介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jeasyui.net/&quot;&gt;JQuery EasyUI中文网站&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://echarts.baidu.com/&quot;&gt;Echarts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>SQL语言中DDL、DML、DCL、TCL简介</title>
     <link href="http://ningg.github.com/sql-language-ddl-dml-dcl-tcl"/>
     <updated>2015-03-31T00:00:00+08:00</updated>
     <id>http://ningg.github.com/sql-language-ddl-dml-dcl-tcl</id>
     <content type="html">&lt;p&gt;SQL（Structured Query Language，结构化查询语言），是操作RDBMS（relational database management system，关系型数据库管理系统）的专用语言。
SQL的众多命令，例如，create、drop、insert、grant等，可以被分为4类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DDL，Data Definition Language，定义数据库结构、表结构；&lt;/li&gt;
  &lt;li&gt;DML，Data Manipulation Language，操作具体数据；&lt;/li&gt;
  &lt;li&gt;DCL，Data Control Language，数据库控制语言，授权、角色控制；&lt;/li&gt;
  &lt;li&gt;TCL，Transaction Control Language，事务控制语言&lt;em&gt;（有的SQL实现支持，有的不支持）&lt;/em&gt;；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ddl&quot;&gt;DDL&lt;/h2&gt;

&lt;p&gt;定义数据库的三级结构，包括外模式、概念模式、内模式以及相互之间的映像，定义数据的完整性、安全控制等约束。&lt;em&gt;（有安全控制？）&lt;/em&gt;
DDL，不需要commit。&lt;/p&gt;

&lt;p&gt;思考：DDL，不需要commit？commit的作用是什么？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CREATE – to create objects in the database&lt;/li&gt;
  &lt;li&gt;ALTER – alters the structure of the database&lt;/li&gt;
  &lt;li&gt;DROP – delete objects from the database&lt;/li&gt;
  &lt;li&gt;TRUNCATE – remove all records from a table, including all spaces allocated for the records are removed&lt;/li&gt;
  &lt;li&gt;COMMENT – add comments to the data dictionary&lt;/li&gt;
  &lt;li&gt;RENAME – rename an object&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dml&quot;&gt;DML&lt;/h2&gt;

&lt;p&gt;对应数据库的增删改查（CRUD）操作。DML分为交互型DML和嵌入型DML两类。依据语言级别，DML又可分为过程性DML和非过程性DML两种。需要commit。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SELECT – retrieve data from the a database&lt;/li&gt;
  &lt;li&gt;INSERT – insert data into a table&lt;/li&gt;
  &lt;li&gt;UPDATE – updates existing data within a table&lt;/li&gt;
  &lt;li&gt;DELETE – Delete all records from a database table&lt;/li&gt;
  &lt;li&gt;MERGE – UPSERT operation (insert or update)&lt;/li&gt;
  &lt;li&gt;CALL – call a PL/SQL or Java subprogram&lt;/li&gt;
  &lt;li&gt;EXPLAIN PLAN – interpretation of the data access path&lt;/li&gt;
  &lt;li&gt;LOCK TABLE – concurrency Control&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dcl&quot;&gt;DCL&lt;/h2&gt;

&lt;p&gt;数据库控制语言，授权、角色控制等&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GRANT – allow users access privileges to database&lt;/li&gt;
  &lt;li&gt;REVOKE – withdraw users access privileges given by using the GRANT command&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tcl&quot;&gt;TCL&lt;/h2&gt;

&lt;p&gt;设置事务控制&lt;em&gt;（不同SQL的实现方式，支持程度不同）&lt;/em&gt;，通常针对DML语句。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SAVEPOINT 设置保存点&lt;/li&gt;
  &lt;li&gt;ROLLBACK  回滚&lt;/li&gt;
  &lt;li&gt;SET TRANSACTION&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;小结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;数据定义，（SQL DDL）用于定义SQL模式、基本表、视图和索引的创建和撤消操作；&lt;/li&gt;
  &lt;li&gt;数据操作，（SQL DML）数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作；&lt;/li&gt;
  &lt;li&gt;数据控制，包括对基本表和视图的授权，完整性规则的描述，事务控制等内容。&lt;/li&gt;
  &lt;li&gt;嵌入式SQL的使用规定。涉及到SQL语句嵌入在宿主语言程序中使用的规则。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sqlddldmldcltcl&quot;&gt;为什么将SQL，细分为DDL\DML\DCL\TCL？&lt;/h2&gt;

&lt;p&gt;将SQL的操作，细分为4类：DDL\DML\DCL\TCL的作用，方便进行分类控制，例如：金融、税务等系统，禁止进行DDL操作。&lt;/p&gt;

&lt;p&gt;思考：上述的权限控制，是否能够只针对单个SQL命令，例如INSERT\UPDATE等？即，更细粒度的权限控制。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/henryhappier/archive/2010/07/05/1771295.html&quot;&gt;SQL四种语言：DDL,DML,DCL,TCL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3schools.in/mysql/ddl-dml-dcl/&quot;&gt;What is DDL, DML and DCL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12803047/why-are-sql-statements-divided-into-ddl-dml-dcl-and-tcl-statements&quot;&gt;Why are SQL statements divided into DDL, DML, DCL and TCL statements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>Navicat for MySQL 常用操作</title>
     <link href="http://ningg.github.com/navicat-intro"/>
     <updated>2015-03-31T00:00:00+08:00</updated>
     <id>http://ningg.github.com/navicat-intro</id>
     <content type="html">&lt;p&gt;（TODO）&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Navicat for MySQL的自带帮助文档（&lt;code&gt;F1&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特别说明：之前整理的《SQL必知必会(第3版)》，内容没有整理完，当前的形态应该是ppt。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;常见问题&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;导出建表语句&lt;/h3&gt;

&lt;p&gt;目标：查看表格的DDL信息&lt;/p&gt;

&lt;p&gt;具体操作：表格 &amp;gt; 右键 &amp;gt; 对象信息 &amp;gt; DDL&lt;/p&gt;

&lt;p&gt;补充：DDL （Data Definition Language，数据定义语言），用于定义数据库的结构；&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>几个概念：UGC\PGC\OGC</title>
     <link href="http://ningg.github.com/ugc-pgc-ogc"/>
     <updated>2015-03-27T00:00:00+08:00</updated>
     <id>http://ningg.github.com/ugc-pgc-ogc</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;UGC\PGC\OGC的定义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UGC，User-Generated Content，&lt;code&gt;用户&lt;/code&gt;生产内容；又称UCC，User-Created Content。&lt;/li&gt;
  &lt;li&gt;PGC，Professionally-generated Content，&lt;code&gt;专业&lt;/code&gt;生产内容；又称PPC，Professionally-produced Content。&lt;/li&gt;
  &lt;li&gt;OGC，Occupationally-Generated Content，&lt;code&gt;职业&lt;/code&gt;生产内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/ugc-pgc-ogc/relation.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么会有UGC\PGC\OGC的划分？先看一下当前的趋势：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web 2.0（论坛、博客为代表）大兴之后，Web 3.0（社交平台、微博为代表）兴起；&lt;/li&gt;
  &lt;li&gt;移动互联网快速扩张，信息量太大，有一个需求：有限的时间内，获得尽可能多的准确信息，这就是专业信息的需求；&lt;/li&gt;
  &lt;li&gt;在垂直领域，内容创作又被细分PGC和UGC，PGC对应专业的内容；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UGC\PGC\OGC之间的区别：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;维度&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;UGC&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;PGC&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;OGC&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;专业知识背景&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;Y&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;Y&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;付费&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code&gt;Y&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;简介几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UGC代表：论坛、博客、微博，内容由用户自行创作，管理人员只是协调和维护秩序；&lt;/li&gt;
  &lt;li&gt;OGC代表：各大新闻站点、视频网站，其内容均有内部自行创造和从外部花钱购入版权；&lt;/li&gt;
  &lt;li&gt;PGC是UGC、OGC都欢迎的对象，因为其既能产生专业的内容，又不需要付费；&lt;/li&gt;
  &lt;li&gt;实际上，PGC只是一种错觉，根本上看来，PGC是UGC的一部分，只是这部分相当专业和精彩；&lt;/li&gt;
  &lt;li&gt;互联网内容供应，仍是泾渭分明的UGC和OGC；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;趋势&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;备注：下面是整理的自己比较认同的别人的观点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PGC将会长久把握话语权，大部分用户，通过PGC获得相对专业、可靠的信息，几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;过去、现在、将来，都是&lt;code&gt;专家意见获得主流话语权&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;PGC只是UGC的一部分；&lt;/li&gt;
  &lt;li&gt;UGC带来的变化，不是话语权的转变，而是&lt;code&gt;专家认证过程&lt;/code&gt;的转变；举例：之前照片拍的好不好，是由垄断的杂志社编辑们说的算，他们认可，你才是摄影专家；Flickr出现后，摄影师，只要获得最终用户（读者）的认可，就可以直接办摄影展；&lt;/li&gt;
  &lt;li&gt;互联网的本质：脱媒，最小化中间环节。（运营商，或者编辑们）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UGC存在的&lt;strong&gt;必要性&lt;/strong&gt;，几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户除了获取专业、可靠的信息，还有两方面需求：互动、个性化；&lt;/li&gt;
  &lt;li&gt;互动：熟人之间互动频繁；互联网使得这些互动，随时随地都可以发生，成本很低；&lt;/li&gt;
  &lt;li&gt;个性化：交通台的路况信息；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新媒体要解决&lt;strong&gt;几个问题&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;内容：好内容永远稀缺，PGC永远占有一席之地；&lt;/li&gt;
  &lt;li&gt;互动：用户交流的价值巨大；&lt;/li&gt;
  &lt;li&gt;高效率分发：例如，新浪微博的关注机制的定制功能；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://yjy.people.com.cn/n/2014/0120/c245079-24169402.html&quot;&gt;浅析UGC、PGC、OGC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19863075&quot;&gt;UGC\PGC谁会成为主流？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>MySQL的命名规范</title>
     <link href="http://ningg.github.com/mysql-name-conventions"/>
     <updated>2015-03-27T00:00:00+08:00</updated>
     <id>http://ningg.github.com/mysql-name-conventions</id>
     <content type="html">&lt;p&gt;数据库、表、字段，如何命名？这可是个大事：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;命名可理解&lt;/li&gt;
  &lt;li&gt;团队协作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面起名起的好，能够减少大量的沟通成本，避免一些错误操作。&lt;/p&gt;

&lt;p&gt;如何去找这些命名规范？初步想了一下，两个途径：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/47617.htm&quot;&gt;MySQL的官方文档&lt;/a&gt;；&lt;/li&gt;
  &lt;li&gt;行业内通用的规范；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;找了一下，行业内通用规范，看到了nettedfish的&lt;a href=&quot;http://vdisk.weibo.com/s/dR8G_5nKajgp&quot;&gt;去哪儿MySQL开发规范.pdf&lt;/a&gt;，规范太多，就这个了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;常用规范简介&lt;/h2&gt;

&lt;p&gt;（todo）&lt;/p&gt;

&lt;p&gt;准备整理一点记得住的规范，要简洁一点。&lt;/p&gt;

&lt;p&gt;详细参考下面几个文档：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/47617.htm&quot;&gt;MySQL数据库命名规范及约定&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/dR8G_5nKajgp&quot;&gt;去哪儿MySQL开发规范.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.6/en/index.html&quot;&gt;MySQL 5.6 Reference Manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jb51.net/article/47617.htm&quot;&gt;MySQL数据库命名规范及约定&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vdisk.weibo.com/s/dR8G_5nKajgp&quot;&gt;去哪儿MySQL开发规范.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>流程图 and 线框图</title>
     <link href="http://ningg.github.com/flow-chart-and-line-diagram"/>
     <updated>2015-03-26T00:00:00+08:00</updated>
     <id>http://ningg.github.com/flow-chart-and-line-diagram</id>
     <content type="html">&lt;p&gt;提示：本篇是杂谈，没有太多系统的干货。&lt;/p&gt;

&lt;p&gt;在产品需求确定之后，下面的工作如何开展？梳理流程图？开启线框图？流程图看起来有点复杂、琐碎，不直观，因为无法直观看到页面；相反，线框图画起来很快的，托拉拽，效果也直观的很。额外说一点，线框图最终成型是以界面为单位，而在实际绘制过程中，可以先梳理人的行为，最后严格梳理界面。&lt;/p&gt;

&lt;p&gt;好了，上面关于流程图和线框图的争论，先不说。下面说一下，需求确定后需要考虑的几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户要获取哪些信息？&lt;em&gt;（用户的目的）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;什么流程，比较合理？&lt;em&gt;（操作过程）&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;上述流程怎么页面化？以页面为单元进行分割；&lt;/li&gt;
  &lt;li&gt;当前页面，有哪些信息需要展示？如何布局？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面是按照线性逻辑，在思考问题，直觉上，感觉是合理的；但事实上，不一定是合理的，具体要从操作层面来看。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;杂谈&lt;/h2&gt;

&lt;p&gt;每天都有系统整理，这个基本是不可能的，因为一天时间太短了，只有24h，而且要睡觉6h；吃饭、间歇休息、上下班路上时间消耗掉4h。剩下的时间…不多说了&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>Git入门</title>
     <link href="http://ningg.github.com/git-intro"/>
     <updated>2015-03-25T00:00:00+08:00</updated>
     <id>http://ningg.github.com/git-intro</id>
     <content type="html">&lt;h2 id=&quot;section&quot;&gt;立意&lt;/h2&gt;

&lt;p&gt;几点想法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git的常用操作&lt;/li&gt;
  &lt;li&gt;Git的基本原理，操作是附属于原理的，对原理的把握，两点好处：方便记忆Git的操作，方便快速定位问题；&lt;/li&gt;
  &lt;li&gt;典型场景下Git的使用
    &lt;ul&gt;
      &lt;li&gt;dev、prod等多个分支如何组织？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本思路：整体上，系统参考几个内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/book/zh/v1&quot;&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot;&gt;git - 简明指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://marklodato.github.io/visual-git-guide/index-zh-cn.html&quot;&gt;图解Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lookenwu/p/3925308.html&quot;&gt;快学Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;几个结果：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;快学Git：git相关的基本操作，不涉及过多原理；&lt;/li&gt;
  &lt;li&gt;详细整理Git：侧重Git的原理，以及常见场景下，Git的用法；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：在之前的&lt;a href=&quot;/project-flume-ng-extends-source&quot;&gt;一篇文章&lt;/a&gt;中也涉及过Git的使用。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;常见问题&lt;/h2&gt;

&lt;h3 id=&quot;git-commitgit-push&quot;&gt;git commit之后，git push之前，如何进行回滚&lt;/h3&gt;

&lt;p&gt;git commit之后，发现有的文件不详添加到git server中，希望回滚，该如何做？&lt;/p&gt;

&lt;p&gt;思路：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将文件git push之后，再添加.gitignore文件；&lt;/li&gt;
  &lt;li&gt;直接回滚处理git commit，然后，添加.gitignore，重新git commit；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（TODO）&lt;/p&gt;

&lt;p&gt;如何解决？thinking…&lt;/p&gt;

&lt;h3 id=&quot;gitignore&quot;&gt;设置.gitignore对多级目录都有效？&lt;/h3&gt;

&lt;p&gt;直接在顶级目录中设置.gitignore？&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;参考来源&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/book/zh/v1&quot;&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rogerdudler.github.io/git-guide/index.zh.html&quot;&gt;git - 简明指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://marklodato.github.io/visual-git-guide/index-zh-cn.html&quot;&gt;图解Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lookenwu/p/3925308.html&quot;&gt;快学Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;闲谈&lt;/h2&gt;

&lt;p&gt;前一段时间得知消息 &lt;code&gt;**&lt;/code&gt; 队伍，逐渐兵强马壮，并且被邀请上了一个山头，做起了事业；细看他们的做法，他们队长在开始的时候，相信 &lt;code&gt;人生要独辟蹊径&lt;/code&gt; 这么个说法，然后，在做事情的时候，他们战略立意为：时间紧迫，做好事情，抓住机会，成立队伍，把事情做好、做丰富，合适机会出现的时候，就做事业。实际上在2年之前，我们队伍与 &lt;code&gt;**&lt;/code&gt; 队伍做的事情是相似的，但我们战略上没有定位，基本想法是：有事情做就把事情做好，一起做事，一起吃肉。最后，毕业了，我们的小队伍，散伙，各自谋生。当然，我认为造成当前与 &lt;code&gt;**&lt;/code&gt; 队伍巨大差异的原因有很多，但我们战略立意太低了，没有战略定位，到头来，就成了混日子，能偷懒的时候，都偷懒了，1年回头一看，啥事情都没做成。我作为队伍的大佬之一，对此反思，下次有机会到北京，跟当时队伍大佬 &lt;code&gt;2W&lt;/code&gt; 见面了，好好扯扯这个事。&lt;/p&gt;

&lt;p&gt;上面为什么提到这个战略定位呢？是想说无论事情大小，都要有个清晰、适当的战略目标，以此避免因为短期视野局限，迷失方向，浪费精力；时间太宝贵了，关键不可逆啊。&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>产品分析、设计基本流程</title>
     <link href="http://ningg.github.com/create-effective-product-protype"/>
     <updated>2015-03-25T00:00:00+08:00</updated>
     <id>http://ningg.github.com/create-effective-product-protype</id>
     <content type="html">&lt;blockquote&gt;
  &lt;p&gt;原文地址：&lt;a href=&quot;http://ued.taobao.org/blog/2014/05/%E9%AB%98%E6%95%88%E8%BE%93%E5%87%BA%E7%A7%BB%E5%8A%A8app%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B/&quot;&gt;高效输出移动app产品原型&lt;/a&gt;。本文在原文基础上，进行适当的调整，添加了自己的理解。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目标：输出移动 app 产品原型，高效的实现这个目标。&lt;/p&gt;

&lt;p&gt;几个特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;产品思路，清晰&lt;/li&gt;
  &lt;li&gt;协同合作，顺畅&lt;/li&gt;
  &lt;li&gt;素材元素，齐备&lt;/li&gt;
  &lt;li&gt;体验感受，真实 &lt;em&gt;（做出的原型）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体操作步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;产品流程图，界面为单位&lt;/li&gt;
  &lt;li&gt;基础原型控件，可修改&lt;/li&gt;
  &lt;li&gt;动态原型，可点击&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下文将分开来说上面的 3 个操作步骤。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;产品流程图，界面为单位&lt;/h2&gt;

&lt;p&gt;高校输出，首先要保证产品的整体思路要正确，这点可以从产品流程中体现出来。移动产品需要做到聚焦，因为手机界面的大小，用户的碎片化使用等等，所以一个界面上必然不可能出现太多的内容和行动点，这就保证了我们可以用最简洁的方式来画流程。以界面为单位，定义 &lt;code&gt;界面标题&lt;/code&gt; 和 &lt;code&gt;主要内容&lt;/code&gt;，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/single-element.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上述页面为单位，来画流程，下面以一个app的登录注册为例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/complete-flow-chart.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上述的产品流程图，有几个目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;快速了解产品有多少页面；&lt;/li&gt;
  &lt;li&gt;检验用户路径是否太长；&lt;/li&gt;
  &lt;li&gt;形式简单，方便讨论修改；&lt;em&gt;（visio中能够批注吗？留下痕迹）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;疑问&lt;/strong&gt;：手机界面小，需要聚焦，因此以 &lt;code&gt;界面&lt;/code&gt; 为单位，绘制最简洁的流程；那 PC 端的产品流程图，如何画？&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;基础原型控件，可修改&lt;/h2&gt;

&lt;p&gt;如何快速产出高保真原型？一套备用的基础原型控件，必不可少。大部分设计师一般利用axure来完成产品原型，所以从协同合作的角度，本文专门在axure里制作了整套最常用的移动产品组控件。设计师只要改文字，改颜色，摆位置就可以完成简单的高保真原型。基础组控件截图如下：&lt;a href=&quot;http://pan.baidu.com/s/1kTjy1Xd&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/gbz03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以此控件为例子，在之前提到的app登录注册例子，快速组件高保真原型，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/gbz04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于设计上很多细节，大家可以查考书籍&lt;a href=&quot;http://product.dangdang.com/23434009.html&quot;&gt;方寸指间——移动设计实战手册&lt;/a&gt;，里面涉及到很多最基本的移动设计知识。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;动态原型，可点击&lt;/h2&gt;

&lt;p&gt;完成高保真原型，根据流程图，可以很方便制作出在手机上可体验的动态效果，让产品人员或用户真实感受app实际的效果。这里推荐一个特别简单的方法，登录&lt;a href=&quot;https://www.flinto.com/&quot;&gt;Flinto&lt;/a&gt;，完成注册，将高保真原型以图片的方式导入，通过链接和专长方式选择，就可以很方便地在手机上查看。网站提供的指导比较具体，大家可以直接查看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/create-effective-product-protype/gbz06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;疑问&lt;/strong&gt;：提供可交互的浏览方式，最佳方案就是借助&lt;a href=&quot;https://www.flinto.com/&quot;&gt;Flinto&lt;/a&gt;等第三方工具吗？&lt;/p&gt;

</content>
   </entry>
   
 
</feed>
